@import "bitcoin/bitcoin_like_wallet.djinni"
@import "ethereum/ethereum_like_wallet.djinni"
@import "../net/http_client.djinni"
@import "../net/websocket_client.djinni"
@import "../fs/path_resolver.djinni"
@import "../debug/logger.djinni"
@import "../async/thread_dispatcher.djinni"
@import "bitcoin/bitcoin_public_key_provider.djinni"
@import "ethereum/ethereum_public_key_provider.djinni"
@import "../errors.djinni"
@import "../preferences/preferences.djinni"
@import "../math/random.djinni"
@import "../database/database.djinni"
@import "configuration.djinni"
@import "../bitcoin/addresses.djinni"
@import "../utils/callback.djinni"
@import "../collections/dynamic.djinni"
@import "common/wallet.djinni"

WalletPool = interface +c {
    getLogger(): Logger;
    getName(): string;
    getPreferences(): Preferences;
    getWalletCount(callback: Callback<i32>);
    getWallets(from: i32, size: i32, callback: ListCallback<Wallet>);
    getWallet(name: string, callback: Callback<Wallet>);
    createWallet(name: string, currency: Currency, configuration: DynamicObject, callback: Callback<Wallet>);
    getCurrencies(callback: ListCallback<Currency>);
    getCurrency(name: string, callback: Callback<Currency>);
    getLastBlock(currencyName: string, callback: Callback<Block>);
    getEventBus(): EventBus;
}

WalletPoolBuilder = interface +c {
    setHttpClient(client: HttpClient): WalletPoolBuilder;
    setWebsocketClient(client: WebSocketClient): WalletPoolBuilder;
    setPathResolver(pathResolver: PathResolver): WalletPoolBuilder;
    setLogPrinter(printer: LogPrinter): WalletPoolBuilder;
    setThreadDispatcher(dispatcher: ThreadDispatcher): WalletPoolBuilder;
    setName(name: string): WalletPoolBuilder;
    setPassword(password: string): WalletPoolBuilder;
    setRandomNumberGenerator(rng: RandomNumberGenerator): WalletPoolBuilder;
    setDatabaseBackend(backend: DatabaseBackend): WalletPoolBuilder;
    setConfiguration(configuration: DynamicObject): WalletPoolBuilder;
    build(listener: Callback<WalletPool>);

    static createInstance(): WalletPoolBuilder;
}

