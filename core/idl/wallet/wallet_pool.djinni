@import "bitcoin/bitcoin_like_wallet.djinni"
@import "ethereum/ethereum_like_wallet.djinni"
@import "../net/http_client.djinni"
@import "../net/websocket_client.djinni"
@import "../fs/path_resolver.djinni"
@import "../debug/logger.djinni"
@import "../async/thread_dispatcher.djinni"
@import "ethereum/ethereum_public_key_provider.djinni"
@import "../errors.djinni"
@import "../preferences/preferences.djinni"
@import "../math/random.djinni"
@import "../database/database.djinni"
@import "configuration.djinni"
@import "../bitcoin/addresses.djinni"
@import "../utils/callback.djinni"
@import "../collections/dynamic.djinni"
@import "common/wallet.djinni"
@import "../debug/logger.djinni"


#Class respresenting a pool of wallets
WalletPool = interface +c {

    #Create a new instance of WalletPool object
    #@param name, string, name of the wallet pool
    #@param password, optional string, password to lock wallet pool
    #@param http, HttpClient object, http client used for all calls made by wallet pool (and aggregated wallets)
    #@param webSocketClient, WebSocketClient object, socket through which wallet pool observe and get notified (explorer, DBs ...)
    #@param pathResolver, PathResolver Object, resolve paths to logs, databases, preferences ...
    #@param logPrinter, LogPrinter object, used to dump/log for debug purpose
    #@param dispatcher, ThreadDispatcher object, responsable of dispatching task through available threads
    #@param rng, RandomNumberGenerator object, needed for generating random numbers (for seeds, salts ...)
    #@param backend, DatabseBackend object, DB in which wallet pool store all required infos (created wallets, their options, their accounts ...)
    #@param configuration, DynamicObject object, desired configuration for this wallet pool
    static newInstance(name: string, password: optional<string>, httpClient: HttpClient,
                        webSocketClient: WebSocketClient, pathResolver: PathResolver,
                        logPrinter: LogPrinter, dispatcher: ThreadDispatcher,
                        rng: RandomNumberGenerator, backend: DatabaseBackend,
                        configuration: DynamicObject): WalletPool;

    getLogger(): Logger;
    getName(): string;
    getPreferences(): Preferences;
    getWalletCount(callback: Callback<i32>);
    getWallets(from: i32, size: i32, callback: ListCallback<Wallet>);
    getWallet(name: string, callback: Callback<Wallet>);
    createWallet(name: string, currency: Currency, configuration: DynamicObject, callback: Callback<Wallet>);
    getCurrencies(callback: ListCallback<Currency>);
    getCurrency(name: string, callback: Callback<Currency>);
    getLastBlock(currencyName: string, callback: Callback<Block>);
    getEventBus(): EventBus;
}

WalletPoolBuilder = interface +c {
    setHttpClient(client: HttpClient): WalletPoolBuilder;
    setWebsocketClient(client: WebSocketClient): WalletPoolBuilder;
    setPathResolver(pathResolver: PathResolver): WalletPoolBuilder;
    setLogPrinter(printer: LogPrinter): WalletPoolBuilder;
    setThreadDispatcher(dispatcher: ThreadDispatcher): WalletPoolBuilder;
    setName(name: string): WalletPoolBuilder;
    setPassword(password: string): WalletPoolBuilder;
    setRandomNumberGenerator(rng: RandomNumberGenerator): WalletPoolBuilder;
    setDatabaseBackend(backend: DatabaseBackend): WalletPoolBuilder;
    setConfiguration(configuration: DynamicObject): WalletPoolBuilder;
    build(listener: Callback<WalletPool>);

    static createInstance(): WalletPoolBuilder;
}

