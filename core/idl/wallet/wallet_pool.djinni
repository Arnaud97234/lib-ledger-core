@import "wallet_common_interface.djinni"
@import "bitcoin/bitcoin_like_wallet.djinni"
@import "ethereum/ethereum_like_wallet.djinni"
@import "../net/http_client.djinni"
@import "../net/websocket_client.djinni"
@import "../fs/path_resolver.djinni"
@import "../debug/logger.djinni"
@import "../async/thread_dispatcher.djinni"
@import "bitcoin/bitcoin_public_key_provider.djinni"
@import "ethereum/ethereum_public_key_provider.djinni"
@import "../errors.djinni"
@import "../preferences/preferences.djinni"
@import "../math/random.djinni"
@import "../database/database.djinni"
@import "configuration.djinni"
@import "../bitcoin/addresses.djinni"
@import "../utils/callback.djinni"
@import "../collections/dynamic.djinni"

# Interface used as a callback to iterate through mutiple BitcoinLikeWallets.
StringArrayCallback = interface +j +o +s +n {
    onCallback(strs: list<string>);
}

BitcoinLikeNetworkParametersCallback = interface +j +o +s +n {
    onCallback(params: list<BitcoinLikeNetworkParameters>);
}

WalletPool = interface +c {
    getOrCreateBitcoinLikeWallet(publicKeyProvider: BitcoinLikeExtendedPublicKeyProvider, networkParams: BitcoinLikeNetworkParameters, configuration: DynamicObject, callback: Callback<BitcoinLikeWallet>);
    getBitcoinLikeWallet(identifier: string, callback: Callback<BitcoinLikeWallet>);
    getSupportedBitcoinLikeNetworkParameters(callback: BitcoinLikeNetworkParametersCallback);
    addBitcoinLikeNetworkParameters(params: BitcoinLikeNetworkParameters);
    removeBitcoinLikenetworkParameters(params: BitcoinLikeNetworkParameters);

    getLogger(): Logger;
    getPreferences(): Preferences;
    getWalletPreferences(walletIdentifier: string): Preferences;
    getAccountPreferences(walletIdentifier: string, accountNumber: i32): Preferences;
    getOperationPreferences(uid: string): Preferences;

}

WalletPoolBuildCallback = interface +j +o +s +n {
    onWalletPoolBuilt(pool: WalletPool);
    onWalletPoolBuildError(error: Error);
}

WalletPoolBuilder = interface +c {
    setHttpClient(client: HttpClient): WalletPoolBuilder;
    setWebsocketClient(client: WebSocketClient): WalletPoolBuilder;
    setPathResolver(pathResolver: PathResolver): WalletPoolBuilder;
    setLogPrinter(printer: LogPrinter): WalletPoolBuilder;
    setThreadDispatcher(dispatcher: ThreadDispatcher): WalletPoolBuilder;
    setName(name: string): WalletPoolBuilder;
    setPassword(password: string): WalletPoolBuilder;
    setRandomNumberGenerator(rng: RandomNumberGenerator): WalletPoolBuilder;
    setDatabaseBackend(backend: DatabaseBackend): WalletPoolBuilder;
    setConfiguration(key: string, value: string): WalletPoolBuilder;
    build(listener: WalletPoolBuildCallback);

    static createInstance(): WalletPoolBuilder;

    const API_BASE_URL: string = "API_BASE_URL";
}

