@import "../../errors.djinni"
@import "../../preferences/preferences.djinni"
@import "../amount.djinni"
@import "../../bitcoin/addresses.djinni"

BitcoinLikeWalletConfiguration = interface +c {
    const KEYCHAIN: string = "keychain";
    const OBSERVER: string = "observer";
    const EXPLORER: string = "explorer";
    const SYNCHRONIZER: string = "synchronizer";
    const KEYCHAIN_P2PKH_BIP44: string = "p2pkh_bip44";
    const OBSERVER_LEDGER_WEBSOCKET: string = "ledger_websocket";
    const EXPLORER_LEDGER_API: string = "ledger_api";
    const SYNCHRONIZER_DEFAULT: string = "default";
}

BitcoinLikeInput = interface +c {
    getAddress(): optional<string>;
    getValue(): optional<Amount>;
    isCoinbase(): bool;
    getCoinbase(): optional<string>;
    getPreviousTxHash(): optional<string>;
    getPreviousOutputIndex(): optional<i32>;
}

BitcoinLikeOutput = interface +c {
    getTransactionHash(): string;
    getOutputIndex(): i32;
    getValue(): Amount;
    getScript(): binary;
    getAddress(): optional<string>;
}

BitcoinLikeBlock = interface +c {
    getHash(): string;
    getHeight(): i64;
    getTime(): date;
}

BitcoinLikeTransaction = interface +c {
    getHash(): string;
    getInputs(): list<BitcoinLikeInput>;
    getOutputs(): list<BitcoinLikeOutput>;
    getBlock(): optional<BitcoinLikeBlock>;
    getLockTime(): i64;
    getFees(): Amount;
    getTime(): date;
}

BitcoinLikeOperation = interface +c {
    getTransaction(): BitcoinLikeTransaction;
}

BitcoinLikeTransactionRequest = record {
    utxo: list<BitcoinLikeOutput>;
    outputs: list<BitcoinLikeOutput>;
    baseFees: optional<Amount>;
    totalFees: optional<Amount>;
    lockTime: optional<i32>;

}

BitcoinLikePreparedTransaction = record {
    version: i32;
    inputs: list<BitcoinLikeOutput>;
    paths: list<string>;
    outputs: list<BitcoinLikeOutput>;
    lockTime: i32;
}

BitcoinLikeHelper = interface +c {
    static scriptToOutput(script: binary, amount: Amount): BitcoinLikeOutput;
    static addressToOutput(address: string, amount: Amount): BitcoinLikeOutput;
    static serializeTransaction(preparedTransaction: BitcoinLikePreparedTransaction): binary;
    static parseTransaction(transaction: binary): BitcoinLikeTransaction;
}

BitcoinLikePickingStrategy = enum {
    deep_outputs_first;
    optimize_size;
    merge_outputs;
}

BitcoinLikeAccount = interface +c {
    getUTXO(from: i32, to: i32, callback: ListCallback<BitcoinLikeOutput>);
    getUTXOCount(callback: Callback<i32>);
    pickUTXO(baseFees: Amount, outputs: list<BitcoinLikeOutput>, strategy: BitcoinLikePickingStrategy, callback: Callback<BitcoinLikeTransactionRequest>);
    estimateFees(request: BitcoinLikeTransactionRequest, callback: Callback<BitcoinLikeTransactionRequest>);
    prepareTransaction(request: BitcoinLikeTransactionRequest, callback: Callback<BitcoinLikePreparedTransaction>);
    broadcastTransaction(transaction: binary, callback: Callback<string>);
}


BitcoinLikeWallet = interface +c {

}