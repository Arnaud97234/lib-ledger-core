@import "../../errors.djinni"
@import "../../preferences/preferences.djinni"
@import "../amount.djinni"
@import "../../bitcoin/addresses.djinni"
@import "bitcoin_public_key_provider.djinni"

BitcoinLikeWalletConfiguration = interface +c {
    const KEYCHAIN: string = "keychain";
    const OBSERVER: string = "observer";
    const EXPLORER: string = "explorer";
    const SYNCHRONIZER: string = "synchronizer";
    const KEYCHAIN_P2PKH_BIP44: string = "p2pkh_bip44";
    const OBSERVER_LEDGER_WEBSOCKET: string = "ledger_websocket";
    const EXPLORER_LEDGER_API: string = "ledger_api";
    const SYNCHRONIZER_DEFAULT: string = "default";
}

BitcoinLikeInput = interface +c {
    getAddress(): optional<string>;
    getAddressDerivationPath(): optional<string>;
    getValue(): optional<Amount>;
    isCoinbase(): bool;
    getCoinbase(): optional<string>;
    getPreviousTxHash(): string;
    getPreviousOutputIndex(): i32;
}

BitcoinLikeOutput = interface +c {
    getTransactionHash(): string;
    getOutputIndex(): i32;
    getAddressDerivationPath(): optional<string>;
    getValue(): Amount;
    getScript(): binary;
    getAddress(): optional<string>;
}

BitcoinLikeBlock = interface +c {
    getHash(): string;
    getHeight(): i64;
    getTime(): date;
}

BitcoinLikeTransaction = interface +c {
    getInputs(): list<BitcoinLikeInput>;
    getOutputs(): list<BitcoinLikeOutput>;
    getBlock(): optional<BitcoinLikeBlock>;
    getLockTime(): i64;
    getFees(): Amount;
    geTime(): date;
}

BitcoinLikeOperation = interface +c {
    getTransaction(): BitcoinLikeTransaction;
}

BitcoinLikeAccount = interface +c {
    getUTXO(from: i32, to: i32, callback: ListCallback<BitcoinLikeOutput>);
    getUTXOCount(callback: Callback<i32>);
}

BitcoinLikeWallet = interface +c {

    createNewAccount(index: i32, xpubProvider: BitcoinLikeExtendedPublicKeyProvider, callback: Callback<Account>);
    createNextAccount(xpubProvider: BitcoinLikeExtendedPublicKeyProvider, callback: Callback<Account>);
}