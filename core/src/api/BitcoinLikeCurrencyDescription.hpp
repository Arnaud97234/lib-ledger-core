// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKECURRENCYDESCRIPTION_HPP
#define DJINNI_GENERATED_BITCOINLIKECURRENCYDESCRIPTION_HPP

#include <cstdint>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

struct BitcoinLikeCurrencyDescription final {
    int32_t BIP44CoinType;
    std::vector<uint8_t> P2PKHAddressVersion;
    std::vector<uint8_t> P2SHAddressVersion;
    std::vector<uint8_t> XPUBAddressVersion;
    std::string shortName;

    BitcoinLikeCurrencyDescription(int32_t BIP44CoinType_,
                                   std::vector<uint8_t> P2PKHAddressVersion_,
                                   std::vector<uint8_t> P2SHAddressVersion_,
                                   std::vector<uint8_t> XPUBAddressVersion_,
                                   std::string shortName_)
    : BIP44CoinType(std::move(BIP44CoinType_))
    , P2PKHAddressVersion(std::move(P2PKHAddressVersion_))
    , P2SHAddressVersion(std::move(P2SHAddressVersion_))
    , XPUBAddressVersion(std::move(XPUBAddressVersion_))
    , shortName(std::move(shortName_))
    {}

    BitcoinLikeCurrencyDescription(const BitcoinLikeCurrencyDescription& cpy) {
       this->BIP44CoinType = cpy.BIP44CoinType;
       this->P2PKHAddressVersion = cpy.P2PKHAddressVersion;
       this->P2SHAddressVersion = cpy.P2SHAddressVersion;
       this->XPUBAddressVersion = cpy.XPUBAddressVersion;
       this->shortName = cpy.shortName;
    }

    BitcoinLikeCurrencyDescription() = default;


    BitcoinLikeCurrencyDescription& operator=(const BitcoinLikeCurrencyDescription& cpy) {
       this->BIP44CoinType = cpy.BIP44CoinType;
       this->P2PKHAddressVersion = cpy.P2PKHAddressVersion;
       this->P2SHAddressVersion = cpy.P2SHAddressVersion;
       this->XPUBAddressVersion = cpy.XPUBAddressVersion;
       this->shortName = cpy.shortName;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(BIP44CoinType, P2PKHAddressVersion, P2SHAddressVersion, XPUBAddressVersion, shortName);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(BIP44CoinType, P2PKHAddressVersion, P2SHAddressVersion, XPUBAddressVersion, shortName);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKECURRENCYDESCRIPTION_HPP
