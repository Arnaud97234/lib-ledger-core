// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

#pragma once

#include "../utils/optional.hpp"
#include <memory>
#include <vector>

namespace ledger { namespace core { namespace api {

class BitcoinLikeWallet;
class BitcoinPublicKeyProvider;
class CryptoCurrencyDescription;
class EthereumLikeWallet;
class EthereumPublicKeyProvider;
class GetBitcoinLikeWalletCallback;
class GetEthreumLikeWalletCallback;
class Logger;
class Preferences;
class WalletCommonInterface;

class WalletPool {
public:
    virtual ~WalletPool() {}

    virtual std::vector<std::shared_ptr<WalletCommonInterface>> getAllWallets() = 0;

    virtual std::vector<std::shared_ptr<BitcoinLikeWallet>> getAllBitcoinLikeWallets() = 0;

    virtual std::vector<std::shared_ptr<EthereumLikeWallet>> getAllEthereumLikeWallets() = 0;

    virtual void getOrCreateBitcoinLikeWallet(const std::shared_ptr<BitcoinPublicKeyProvider> & publicKeyProvider, const std::shared_ptr<CryptoCurrencyDescription> & currency, const std::shared_ptr<GetBitcoinLikeWalletCallback> & callback) = 0;

    virtual void getOrCreateEthereumLikeWallet(const std::shared_ptr<EthereumPublicKeyProvider> & publicKeyProvider, const std::shared_ptr<CryptoCurrencyDescription> & currency, const std::shared_ptr<GetEthreumLikeWalletCallback> & callback) = 0;

    virtual std::vector<std::shared_ptr<CryptoCurrencyDescription>> getAllSupportedCryptoCurrencies() = 0;

    virtual std::shared_ptr<Logger> getLogger() = 0;

    virtual std::shared_ptr<Preferences> getPreferences() = 0;

    virtual void close() = 0;
};

} } }  // namespace ledger::core::api
