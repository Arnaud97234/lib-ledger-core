// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#ifndef DJINNI_GENERATED_ACCOUNT_HPP
#define DJINNI_GENERATED_ACCOUNT_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class Amount;
class AmountCallback;
class EventBus;
class I64Callback;
class Logger;
class OperationCallback;
class OperationListCallback;
class Preferences;
enum class WalletType;

class Account {
public:
    virtual ~Account() {}

    virtual int32_t getIndex() = 0;

    virtual void getOperations(int32_t from, int32_t to, bool descending, bool complete, const std::shared_ptr<OperationListCallback> & callback) = 0;

    virtual void getOperationsCount(const std::shared_ptr<I64Callback> & callback) = 0;

    virtual void getOperation(const std::string & uid, const std::shared_ptr<OperationCallback> & callback) = 0;

    virtual void getBalance(const std::shared_ptr<AmountCallback> & callback) = 0;

    virtual bool isSynchronizing() = 0;

    virtual std::shared_ptr<EventBus> synchronize() = 0;

    virtual std::shared_ptr<Preferences> getPreferences() = 0;

    virtual std::shared_ptr<Logger> getLogger() = 0;

    virtual std::shared_ptr<Preferences> getOperationPreferences(const std::string & uid) = 0;

    /**
     * asBitcoinLikeAccount(): Callback<BitcoinLikeAccount>;
     * asEthereumLikeAccount(): Callback<EthereumLikeAccount>;
     * asRippleLikeAccount(): Callback<RippleLikeAccount>;
     */
    virtual bool isInstanceOfBitcoinLikeAccount() = 0;

    virtual bool isInstanceOfEthereumLikeAccount() = 0;

    virtual bool isInstanceOfRippleLikeAccount() = 0;

    virtual WalletType getWalletType() = 0;

    virtual void computeFees(const std::shared_ptr<Amount> & amount, int32_t priority, const std::vector<std::string> & recipients, const std::vector<std::vector<uint8_t>> & data, const std::shared_ptr<AmountCallback> & callback) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ACCOUNT_HPP
