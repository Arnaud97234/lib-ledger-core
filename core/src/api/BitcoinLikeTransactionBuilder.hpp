// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKETRANSACTIONBUILDER_HPP
#define DJINNI_GENERATED_BITCOINLIKETRANSACTIONBUILDER_HPP

#include <cstdint>
#include <memory>
#include <string>

namespace ledger { namespace core { namespace api {

class Amount;
class BitcoinLikeScript;
class BitcoinLikeTransactionCallback;
enum class BitcoinLikePickingStrategy;

class BitcoinLikeTransactionBuilder {
public:
    virtual ~BitcoinLikeTransactionBuilder() {}

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> addInput(const std::string & transactionHash, int32_t index, int32_t sequence) = 0;

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> addOutput(const std::shared_ptr<Amount> & amount, const std::shared_ptr<BitcoinLikeScript> & script) = 0;

    virtual void addChangePath(const std::string & path) = 0;

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> setNumberOfChangeAddresses(int32_t count) = 0;

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> pickInputs(BitcoinLikePickingStrategy strategy, int32_t sequence) = 0;

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> sendToAddress(const std::shared_ptr<Amount> & amount, const std::string & address) = 0;

    virtual std::shared_ptr<BitcoinLikeTransactionBuilder> setFeesPerByte(const std::shared_ptr<Amount> & fees) = 0;

    virtual void build(const std::shared_ptr<BitcoinLikeTransactionCallback> & callback) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKETRANSACTIONBUILDER_HPP
