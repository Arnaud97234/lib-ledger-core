// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_BITCOINLIKENEXTACCOUNTINFO_HPP
#define DJINNI_GENERATED_BITCOINLIKENEXTACCOUNTINFO_HPP

#include <cstdint>
#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct BitcoinLikeNextAccountInfo final {
    std::string xpubPath;
    int32_t index;
    std::string parentNodePath;
    std::string accountNodePath;

    BitcoinLikeNextAccountInfo(std::string xpubPath_,
                               int32_t index_,
                               std::string parentNodePath_,
                               std::string accountNodePath_)
    : xpubPath(std::move(xpubPath_))
    , index(std::move(index_))
    , parentNodePath(std::move(parentNodePath_))
    , accountNodePath(std::move(accountNodePath_))
    {}

    BitcoinLikeNextAccountInfo(const BitcoinLikeNextAccountInfo& cpy) {
       this->xpubPath = cpy.xpubPath;
       this->index = cpy.index;
       this->parentNodePath = cpy.parentNodePath;
       this->accountNodePath = cpy.accountNodePath;
    }

    BitcoinLikeNextAccountInfo() = default;


    BitcoinLikeNextAccountInfo& operator=(const BitcoinLikeNextAccountInfo& cpy) {
       this->xpubPath = cpy.xpubPath;
       this->index = cpy.index;
       this->parentNodePath = cpy.parentNodePath;
       this->accountNodePath = cpy.accountNodePath;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(xpubPath, index, parentNodePath, accountNodePath);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(xpubPath, index, parentNodePath, accountNodePath);
    }
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_BITCOINLIKENEXTACCOUNTINFO_HPP
