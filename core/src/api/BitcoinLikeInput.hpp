// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#pragma once

#include <cstdint>
#include <iostream>
#include <string>
#include <utility>

namespace ledger { namespace core { namespace api {

struct BitcoinLikeInput final {
    std::string path;
    /**value: Amount; */
    bool isCoinbase;
    std::string previousTxHash;
    int32_t indexInPreviousTx;

    BitcoinLikeInput(std::string path_,
                     bool isCoinbase_,
                     std::string previousTxHash_,
                     int32_t indexInPreviousTx_)
    : path(std::move(path_))
    , isCoinbase(std::move(isCoinbase_))
    , previousTxHash(std::move(previousTxHash_))
    , indexInPreviousTx(std::move(indexInPreviousTx_))
    {}

    BitcoinLikeInput(const BitcoinLikeInput& cpy) {
       this->path = cpy.path;
       this->isCoinbase = cpy.isCoinbase;
       this->previousTxHash = cpy.previousTxHash;
       this->indexInPreviousTx = cpy.indexInPreviousTx;
    }

    BitcoinLikeInput() = default;


    BitcoinLikeInput& operator=(const BitcoinLikeInput& cpy) {
       this->path = cpy.path;
       this->isCoinbase = cpy.isCoinbase;
       this->previousTxHash = cpy.previousTxHash;
       this->indexInPreviousTx = cpy.indexInPreviousTx;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(path, isCoinbase, previousTxHash, indexInPreviousTx);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(path, isCoinbase, previousTxHash, indexInPreviousTx);
    }
};

} } }  // namespace ledger::core::api
