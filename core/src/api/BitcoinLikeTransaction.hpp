// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#pragma once

#include "../utils/optional.hpp"
#include "BitcoinLikeBlock.hpp"
#include "BitcoinLikeInput.hpp"
#include "BitcoinLikeOutput.hpp"
#include <cstdint>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

struct BitcoinLikeTransaction final {
    std::vector<BitcoinLikeInput> inputs;
    std::vector<BitcoinLikeOutput> outputs;
    std::experimental::optional<BitcoinLikeBlock> block;
    int64_t lockTime;
    /**fee: Amount; */
    int64_t time;

    BitcoinLikeTransaction(std::vector<BitcoinLikeInput> inputs_,
                           std::vector<BitcoinLikeOutput> outputs_,
                           std::experimental::optional<BitcoinLikeBlock> block_,
                           int64_t lockTime_,
                           int64_t time_)
    : inputs(std::move(inputs_))
    , outputs(std::move(outputs_))
    , block(std::move(block_))
    , lockTime(std::move(lockTime_))
    , time(std::move(time_))
    {}

    BitcoinLikeTransaction(const BitcoinLikeTransaction& cpy) {
       this->inputs = cpy.inputs;
       this->outputs = cpy.outputs;
       this->block = cpy.block;
       this->lockTime = cpy.lockTime;
       this->time = cpy.time;
    }

    BitcoinLikeTransaction() = default;


    BitcoinLikeTransaction& operator=(const BitcoinLikeTransaction& cpy) {
       this->inputs = cpy.inputs;
       this->outputs = cpy.outputs;
       this->block = cpy.block;
       this->lockTime = cpy.lockTime;
       this->time = cpy.time;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(inputs, outputs, block, lockTime, time);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(inputs, outputs, block, lockTime, time);
    }
};

} } }  // namespace ledger::core::api
