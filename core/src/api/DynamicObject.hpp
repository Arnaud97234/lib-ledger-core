// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

#pragma once

#include "../utils/optional.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class DynamicArray;
enum class DynamicType;

class DynamicObject {
public:
    virtual ~DynamicObject() {}

    virtual std::shared_ptr<DynamicObject> putString(const std::string & key, const std::string & value) = 0;

    virtual std::shared_ptr<DynamicObject> putInt(const std::string & key, int32_t value) = 0;

    virtual std::shared_ptr<DynamicObject> putLong(const std::string & key, int64_t value) = 0;

    virtual std::shared_ptr<DynamicObject> putDouble(const std::string & key, double value) = 0;

    virtual std::shared_ptr<DynamicObject> putData(const std::string & key, const std::vector<uint8_t> & value) = 0;

    virtual std::shared_ptr<DynamicObject> putBoolean(const std::string & key, bool value) = 0;

    virtual std::experimental::optional<std::string> getString(const std::string & key) = 0;

    virtual std::experimental::optional<int32_t> getInt(const std::string & key) = 0;

    virtual std::experimental::optional<int64_t> getLong(const std::string & key) = 0;

    virtual std::experimental::optional<double> getDouble(const std::string & key) = 0;

    virtual std::experimental::optional<std::vector<uint8_t>> getData(const std::string & key) = 0;

    virtual std::experimental::optional<bool> getBoolean(const std::string & key) = 0;

    virtual std::shared_ptr<DynamicObject> putObject(const std::string & key, const std::shared_ptr<DynamicObject> & value) = 0;

    virtual std::shared_ptr<DynamicObject> putArray(const std::string & key, const std::shared_ptr<DynamicArray> & value) = 0;

    virtual std::shared_ptr<DynamicObject> getObject(const std::string & key) = 0;

    virtual std::shared_ptr<DynamicArray> getArray(const std::string & key) = 0;

    virtual bool contains(const std::string & key) = 0;

    virtual bool remove(const std::string & key) = 0;

    virtual std::vector<std::string> getKeys() = 0;

    virtual std::experimental::optional<DynamicType> getType(const std::string & key) = 0;

    virtual std::string dump() = 0;

    virtual std::vector<uint8_t> serialize() = 0;

    virtual int64_t size() = 0;

    static std::shared_ptr<DynamicObject> newInstance();

    static std::shared_ptr<DynamicObject> load(const std::vector<uint8_t> & serialized);
};

} } }  // namespace ledger::core::api
