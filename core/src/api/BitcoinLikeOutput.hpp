// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#pragma once

#include <cstdint>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

namespace ledger { namespace core { namespace api {

struct BitcoinLikeOutput final {
    std::string transactionHash;
    int32_t index;
    std::string path;
    /**value: Amount; */
    std::vector<uint8_t> script;
    std::string address;

    BitcoinLikeOutput(std::string transactionHash_,
                      int32_t index_,
                      std::string path_,
                      std::vector<uint8_t> script_,
                      std::string address_)
    : transactionHash(std::move(transactionHash_))
    , index(std::move(index_))
    , path(std::move(path_))
    , script(std::move(script_))
    , address(std::move(address_))
    {}

    BitcoinLikeOutput(const BitcoinLikeOutput& cpy) {
       this->transactionHash = cpy.transactionHash;
       this->index = cpy.index;
       this->path = cpy.path;
       this->script = cpy.script;
       this->address = cpy.address;
    }

    BitcoinLikeOutput() = default;


    BitcoinLikeOutput& operator=(const BitcoinLikeOutput& cpy) {
       this->transactionHash = cpy.transactionHash;
       this->index = cpy.index;
       this->path = cpy.path;
       this->script = cpy.script;
       this->address = cpy.address;
       return *this;
    }

    template <class Archive>
    void load(Archive& archive) {
        archive(transactionHash, index, path, script, address);
    }

    template <class Archive>
    void save(Archive& archive) const {
        archive(transactionHash, index, path, script, address);
    }
};

} } }  // namespace ledger::core::api
