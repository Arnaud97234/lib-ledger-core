// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#pragma once

#include "../../api/I64TestCallback.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class I64TestCallback final : ::djinni::JniInterface<::ledger::core::api::I64TestCallback, I64TestCallback> {
public:
    using CppType = std::shared_ptr<::ledger::core::api::I64TestCallback>;
    using CppOptType = std::shared_ptr<::ledger::core::api::I64TestCallback>;
    using JniType = jobject;

    using Boxed = I64TestCallback;

    ~I64TestCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<I64TestCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<I64TestCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    I64TestCallback();
    friend ::djinni::JniClass<I64TestCallback>;
    friend ::djinni::JniInterface<::ledger::core::api::I64TestCallback, I64TestCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ledger::core::api::I64TestCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onCallback(std::experimental::optional<int64_t> value, const std::experimental::optional<::ledger::core::api::Error> & error) override;
        void onValue(int64_t value) override;
        int64_t getValue() override;

    private:
        friend ::djinni::JniInterface<::ledger::core::api::I64TestCallback, ::djinni_generated::I64TestCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("co/ledger/core/I64TestCallback") };
    const jmethodID method_onCallback { ::djinni::jniGetMethodID(clazz.get(), "onCallback", "(Ljava/lang/Long;Lco/ledger/core/Error;)V") };
    const jmethodID method_onValue { ::djinni::jniGetMethodID(clazz.get(), "onValue", "(J)V") };
    const jmethodID method_getValue { ::djinni::jniGetMethodID(clazz.get(), "getValue", "()J") };
};

}  // namespace djinni_generated
