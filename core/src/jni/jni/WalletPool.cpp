// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

#include "WalletPool.hpp"  // my header
#include "BitcoinLikeWallet.hpp"
#include "BitcoinPublicKeyProvider.hpp"
#include "CryptoCurrencyDescription.hpp"
#include "EthereumLikeWallet.hpp"
#include "EthereumPublicKeyProvider.hpp"
#include "GetBitcoinLikeWalletCallback.hpp"
#include "GetEthreumLikeWalletCallback.hpp"
#include "Logger.hpp"
#include "Marshal.hpp"
#include "WalletCommonInterface.hpp"

namespace djinni_generated {

WalletPool::WalletPool() : ::djinni::JniInterface<::ledger::core::api::WalletPool, WalletPool>("co/ledger/core/WalletPool$CppProxy") {}

WalletPool::~WalletPool() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::WalletPool>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getAllWallets(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        auto r = ref->getAllWallets();
        return ::djinni::release(::djinni::List<::djinni_generated::WalletCommonInterface>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getAllBitcoinLikeWallets(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        auto r = ref->getAllBitcoinLikeWallets();
        return ::djinni::release(::djinni::List<::djinni_generated::BitcoinLikeWallet>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getAllEthereumLikeWallets(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        auto r = ref->getAllEthereumLikeWallets();
        return ::djinni::release(::djinni::List<::djinni_generated::EthereumLikeWallet>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getOrCreateBitcoinLikeWallet(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_publicKeyProvider, jobject j_currency, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        ref->getOrCreateBitcoinLikeWallet(::djinni_generated::BitcoinPublicKeyProvider::toCpp(jniEnv, j_publicKeyProvider),
                                          ::djinni::Optional<std::experimental::optional, ::djinni_generated::CryptoCurrencyDescription>::toCpp(jniEnv, j_currency),
                                          ::djinni_generated::GetBitcoinLikeWalletCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getOrCreateEthereumLikeWallet(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_publicKeyProvider, jobject j_currency, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        ref->getOrCreateEthereumLikeWallet(::djinni_generated::EthereumPublicKeyProvider::toCpp(jniEnv, j_publicKeyProvider),
                                           ::djinni::Optional<std::experimental::optional, ::djinni_generated::CryptoCurrencyDescription>::toCpp(jniEnv, j_currency),
                                           ::djinni_generated::GetEthreumLikeWalletCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getAllSupportedCryptoCurrencies(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        auto r = ref->getAllSupportedCryptoCurrencies();
        return ::djinni::release(::djinni::List<::djinni_generated::CryptoCurrencyDescription>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1getLogger(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        auto r = ref->getLogger();
        return ::djinni::release(::djinni_generated::Logger::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_ledger_core_WalletPool_00024CppProxy_native_1close(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::WalletPool>(nativeRef);
        ref->close();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
