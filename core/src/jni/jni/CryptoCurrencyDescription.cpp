// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from crypto_currency_description.djinni

#include "CryptoCurrencyDescription.hpp"  // my header
#include "CryptoCurrencyUnit.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

CryptoCurrencyDescription::CryptoCurrencyDescription() : ::djinni::JniInterface<::ledger::core::api::CryptoCurrencyDescription, CryptoCurrencyDescription>("co/ledger/core/CryptoCurrencyDescription$CppProxy") {}

CryptoCurrencyDescription::~CryptoCurrencyDescription() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::CryptoCurrencyDescription>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_native_1getIdentifier(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::CryptoCurrencyDescription>(nativeRef);
        auto r = ref->getIdentifier();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_native_1getName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::CryptoCurrencyDescription>(nativeRef);
        auto r = ref->getName();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_native_1getUnits(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::CryptoCurrencyDescription>(nativeRef);
        auto r = ref->getUnits();
        return ::djinni::release(::djinni::List<::djinni_generated::CryptoCurrencyUnit>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_native_1getDecimalPlaceOfSmallestUnit(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::CryptoCurrencyDescription>(nativeRef);
        auto r = ref->getDecimalPlaceOfSmallestUnit();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_native_1getBolosApplicationName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::CryptoCurrencyDescription>(nativeRef);
        auto r = ref->getBolosApplicationName();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_co_ledger_core_CryptoCurrencyDescription_00024CppProxy_native_1getDerivationScheme(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::CryptoCurrencyDescription>(nativeRef);
        auto r = ref->getDerivationScheme();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
