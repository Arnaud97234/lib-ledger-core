// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "DatabaseBackend.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

DatabaseBackend::DatabaseBackend() : ::djinni::JniInterface<::ledger::core::api::DatabaseBackend, DatabaseBackend>("co/ledger/core/DatabaseBackend$CppProxy") {}

DatabaseBackend::~DatabaseBackend() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::DatabaseBackend>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setUsername(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_username)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setUsername(::djinni::String::toCpp(jniEnv, j_username));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setPassword(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_pwd)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setPassword(::djinni::String::toCpp(jniEnv, j_pwd));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setHost(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_host)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setHost(::djinni::String::toCpp(jniEnv, j_host));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setHostAddr(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_hostAddr)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setHostAddr(::djinni::String::toCpp(jniEnv, j_hostAddr));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setPort(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_port)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setPort(::djinni::String::toCpp(jniEnv, j_port));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setOptions(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_opts)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setOptions(::djinni::String::toCpp(jniEnv, j_opts));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setSslMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_mode)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setSslMode(::djinni::String::toCpp(jniEnv, j_mode));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setKerberosName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setKerberosName(::djinni::String::toCpp(jniEnv, j_name));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_00024CppProxy_native_1setService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_service)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::DatabaseBackend>(nativeRef);
        auto r = ref->setService(::djinni::String::toCpp(jniEnv, j_service));
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_getSqlite3Backend(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::DatabaseBackend::getSqlite3Backend();
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_ledger_core_DatabaseBackend_getPostgreSQLBackend(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ledger::core::api::DatabaseBackend::getPostgreSQLBackend();
        return ::djinni::release(::djinni_generated::DatabaseBackend::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
