// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class DynamicObject {
    public abstract boolean isReadOnly();

    public abstract DynamicObject putString(String key, String value);

    public abstract DynamicObject putInt(String key, int value);

    public abstract DynamicObject putLong(String key, long value);

    public abstract DynamicObject putDouble(String key, double value);

    public abstract DynamicObject putData(String key, byte[] value);

    public abstract DynamicObject putBoolean(String key, boolean value);

    public abstract String getString(String key);

    public abstract Integer getInt(String key);

    public abstract Long getLong(String key);

    public abstract Double getDouble(String key);

    public abstract byte[] getData(String key);

    public abstract Boolean getBoolean(String key);

    public abstract DynamicObject putObject(String key, DynamicObject value);

    public abstract DynamicObject putArray(String key, DynamicArray value);

    public abstract DynamicObject getObject(String key);

    public abstract DynamicArray getArray(String key);

    public abstract boolean contains(String key);

    public abstract boolean remove(String key);

    public abstract ArrayList<String> getKeys();

    public abstract DynamicType getType(String key);

    public abstract String dump();

    public abstract byte[] serialize();

    public abstract long size();

    public static native DynamicObject newInstance();

    public static native DynamicObject load(byte[] serialized);

    private static final class CppProxy extends DynamicObject
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean isReadOnly()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isReadOnly(this.nativeRef);
        }
        private native boolean native_isReadOnly(long _nativeRef);

        @Override
        public DynamicObject putString(String key, String value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putString(this.nativeRef, key, value);
        }
        private native DynamicObject native_putString(long _nativeRef, String key, String value);

        @Override
        public DynamicObject putInt(String key, int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putInt(this.nativeRef, key, value);
        }
        private native DynamicObject native_putInt(long _nativeRef, String key, int value);

        @Override
        public DynamicObject putLong(String key, long value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putLong(this.nativeRef, key, value);
        }
        private native DynamicObject native_putLong(long _nativeRef, String key, long value);

        @Override
        public DynamicObject putDouble(String key, double value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putDouble(this.nativeRef, key, value);
        }
        private native DynamicObject native_putDouble(long _nativeRef, String key, double value);

        @Override
        public DynamicObject putData(String key, byte[] value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putData(this.nativeRef, key, value);
        }
        private native DynamicObject native_putData(long _nativeRef, String key, byte[] value);

        @Override
        public DynamicObject putBoolean(String key, boolean value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putBoolean(this.nativeRef, key, value);
        }
        private native DynamicObject native_putBoolean(long _nativeRef, String key, boolean value);

        @Override
        public String getString(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getString(this.nativeRef, key);
        }
        private native String native_getString(long _nativeRef, String key);

        @Override
        public Integer getInt(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInt(this.nativeRef, key);
        }
        private native Integer native_getInt(long _nativeRef, String key);

        @Override
        public Long getLong(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLong(this.nativeRef, key);
        }
        private native Long native_getLong(long _nativeRef, String key);

        @Override
        public Double getDouble(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDouble(this.nativeRef, key);
        }
        private native Double native_getDouble(long _nativeRef, String key);

        @Override
        public byte[] getData(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getData(this.nativeRef, key);
        }
        private native byte[] native_getData(long _nativeRef, String key);

        @Override
        public Boolean getBoolean(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBoolean(this.nativeRef, key);
        }
        private native Boolean native_getBoolean(long _nativeRef, String key);

        @Override
        public DynamicObject putObject(String key, DynamicObject value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putObject(this.nativeRef, key, value);
        }
        private native DynamicObject native_putObject(long _nativeRef, String key, DynamicObject value);

        @Override
        public DynamicObject putArray(String key, DynamicArray value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_putArray(this.nativeRef, key, value);
        }
        private native DynamicObject native_putArray(long _nativeRef, String key, DynamicArray value);

        @Override
        public DynamicObject getObject(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getObject(this.nativeRef, key);
        }
        private native DynamicObject native_getObject(long _nativeRef, String key);

        @Override
        public DynamicArray getArray(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getArray(this.nativeRef, key);
        }
        private native DynamicArray native_getArray(long _nativeRef, String key);

        @Override
        public boolean contains(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_contains(this.nativeRef, key);
        }
        private native boolean native_contains(long _nativeRef, String key);

        @Override
        public boolean remove(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_remove(this.nativeRef, key);
        }
        private native boolean native_remove(long _nativeRef, String key);

        @Override
        public ArrayList<String> getKeys()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getKeys(this.nativeRef);
        }
        private native ArrayList<String> native_getKeys(long _nativeRef);

        @Override
        public DynamicType getType(String key)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getType(this.nativeRef, key);
        }
        private native DynamicType native_getType(long _nativeRef, String key);

        @Override
        public String dump()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dump(this.nativeRef);
        }
        private native String native_dump(long _nativeRef);

        @Override
        public byte[] serialize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_serialize(this.nativeRef);
        }
        private native byte[] native_serialize(long _nativeRef);

        @Override
        public long size()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_size(this.nativeRef);
        }
        private native long native_size(long _nativeRef);
    }
}
