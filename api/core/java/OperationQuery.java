// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class OperationQuery {
    public abstract OperationQuery addOrder(OperationOrderKey key, boolean descending);

    public abstract QueryFilter filter();

    public abstract OperationQuery offset(long from);

    public abstract OperationQuery limit(long count);

    public abstract OperationQuery complete();

    public abstract OperationQuery partial();

    public abstract void execute(OperationListCallback callback);

    private static final class CppProxy extends OperationQuery
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public OperationQuery addOrder(OperationOrderKey key, boolean descending)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addOrder(this.nativeRef, key, descending);
        }
        private native OperationQuery native_addOrder(long _nativeRef, OperationOrderKey key, boolean descending);

        @Override
        public QueryFilter filter()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_filter(this.nativeRef);
        }
        private native QueryFilter native_filter(long _nativeRef);

        @Override
        public OperationQuery offset(long from)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_offset(this.nativeRef, from);
        }
        private native OperationQuery native_offset(long _nativeRef, long from);

        @Override
        public OperationQuery limit(long count)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_limit(this.nativeRef, count);
        }
        private native OperationQuery native_limit(long _nativeRef, long count);

        @Override
        public OperationQuery complete()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_complete(this.nativeRef);
        }
        private native OperationQuery native_complete(long _nativeRef);

        @Override
        public OperationQuery partial()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_partial(this.nativeRef);
        }
        private native OperationQuery native_partial(long _nativeRef);

        @Override
        public void execute(OperationListCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_execute(this.nativeRef, callback);
        }
        private native void native_execute(long _nativeRef, OperationListCallback callback);
    }
}
