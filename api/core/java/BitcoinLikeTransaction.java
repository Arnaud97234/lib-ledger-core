// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class BitcoinLikeTransaction {
    public abstract String getHash();

    public abstract ArrayList<BitcoinLikeInput> getInputs();

    public abstract ArrayList<BitcoinLikeOutput> getOutputs();

    public abstract BitcoinLikeBlock getBlock();

    public abstract long getLockTime();

    public abstract Amount getFees();

    public abstract Date getTime();

    private static final class CppProxy extends BitcoinLikeTransaction
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getHash()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHash(this.nativeRef);
        }
        private native String native_getHash(long _nativeRef);

        @Override
        public ArrayList<BitcoinLikeInput> getInputs()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInputs(this.nativeRef);
        }
        private native ArrayList<BitcoinLikeInput> native_getInputs(long _nativeRef);

        @Override
        public ArrayList<BitcoinLikeOutput> getOutputs()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOutputs(this.nativeRef);
        }
        private native ArrayList<BitcoinLikeOutput> native_getOutputs(long _nativeRef);

        @Override
        public BitcoinLikeBlock getBlock()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBlock(this.nativeRef);
        }
        private native BitcoinLikeBlock native_getBlock(long _nativeRef);

        @Override
        public long getLockTime()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLockTime(this.nativeRef);
        }
        private native long native_getLockTime(long _nativeRef);

        @Override
        public Amount getFees()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFees(this.nativeRef);
        }
        private native Amount native_getFees(long _nativeRef);

        @Override
        public Date getTime()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTime(this.nativeRef);
        }
        private native Date native_getTime(long _nativeRef);
    }
}
