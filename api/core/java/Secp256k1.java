// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from secp256k1.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Secp256k1 {
    public abstract byte[] computePubKey(byte[] privKey, boolean compress);

    public abstract byte[] sign(byte[] privKey, byte[] data);

    public abstract boolean verify(byte[] data, byte[] signature, byte[] pubKey);

    public static native Secp256k1 newInstance();

    private static final class CppProxy extends Secp256k1
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public byte[] computePubKey(byte[] privKey, boolean compress)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_computePubKey(this.nativeRef, privKey, compress);
        }
        private native byte[] native_computePubKey(long _nativeRef, byte[] privKey, boolean compress);

        @Override
        public byte[] sign(byte[] privKey, byte[] data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sign(this.nativeRef, privKey, data);
        }
        private native byte[] native_sign(long _nativeRef, byte[] privKey, byte[] data);

        @Override
        public boolean verify(byte[] data, byte[] signature, byte[] pubKey)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_verify(this.nativeRef, data, signature, pubKey);
        }
        private native boolean native_verify(long _nativeRef, byte[] data, byte[] signature, byte[] pubKey);
    }
}
