// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class DatabaseBackend {
    public abstract DatabaseBackend setUsername(String username);

    public abstract DatabaseBackend setPassword(String pwd);

    public abstract DatabaseBackend setHost(String host);

    public abstract DatabaseBackend setHostAddr(String hostAddr);

    public abstract DatabaseBackend setPort(String port);

    public abstract DatabaseBackend setOptions(String opts);

    public abstract DatabaseBackend setSslMode(String mode);

    public abstract DatabaseBackend setKerberosName(String name);

    public abstract DatabaseBackend setService(String service);

    public static native DatabaseBackend getSqlite3Backend();

    public static native DatabaseBackend getPostgreSQLBackend();

    private static final class CppProxy extends DatabaseBackend
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public DatabaseBackend setUsername(String username)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setUsername(this.nativeRef, username);
        }
        private native DatabaseBackend native_setUsername(long _nativeRef, String username);

        @Override
        public DatabaseBackend setPassword(String pwd)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setPassword(this.nativeRef, pwd);
        }
        private native DatabaseBackend native_setPassword(long _nativeRef, String pwd);

        @Override
        public DatabaseBackend setHost(String host)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setHost(this.nativeRef, host);
        }
        private native DatabaseBackend native_setHost(long _nativeRef, String host);

        @Override
        public DatabaseBackend setHostAddr(String hostAddr)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setHostAddr(this.nativeRef, hostAddr);
        }
        private native DatabaseBackend native_setHostAddr(long _nativeRef, String hostAddr);

        @Override
        public DatabaseBackend setPort(String port)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setPort(this.nativeRef, port);
        }
        private native DatabaseBackend native_setPort(long _nativeRef, String port);

        @Override
        public DatabaseBackend setOptions(String opts)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setOptions(this.nativeRef, opts);
        }
        private native DatabaseBackend native_setOptions(long _nativeRef, String opts);

        @Override
        public DatabaseBackend setSslMode(String mode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setSslMode(this.nativeRef, mode);
        }
        private native DatabaseBackend native_setSslMode(long _nativeRef, String mode);

        @Override
        public DatabaseBackend setKerberosName(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setKerberosName(this.nativeRef, name);
        }
        private native DatabaseBackend native_setKerberosName(long _nativeRef, String name);

        @Override
        public DatabaseBackend setService(String service)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setService(this.nativeRef, service);
        }
        private native DatabaseBackend native_setService(long _nativeRef, String service);
    }
}
