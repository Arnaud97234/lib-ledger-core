// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Account {
    public abstract int getIndex();

    public abstract OperationListCallback getOperations(int from, int to, boolean descending);

    public abstract I64Callback getOperationsCount();

    public abstract OperationCallback getOperation(String uid);

    public abstract AmountCallback getBalance();

    public abstract boolean isSynchronizing();

    public abstract EventBus synchronize();

    public abstract Preferences getPreferences();

    /**
     * asBitcoinLikeAccount(): Callback<BitcoinLikeAccount>;
     * asEthereumLikeAccount(): Callback<EthereumLikeAccount>;
     * asRippleLikeAccount(): Callback<RippleLikeAccount>;
     */
    public abstract boolean isInstanceOfBitcoinLikeAccount();

    public abstract boolean isInstanceOfEthereumLikeAccount();

    public abstract boolean isInstanceOfRippleLikeAccount();

    private static final class CppProxy extends Account
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int getIndex()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getIndex(this.nativeRef);
        }
        private native int native_getIndex(long _nativeRef);

        @Override
        public OperationListCallback getOperations(int from, int to, boolean descending)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOperations(this.nativeRef, from, to, descending);
        }
        private native OperationListCallback native_getOperations(long _nativeRef, int from, int to, boolean descending);

        @Override
        public I64Callback getOperationsCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOperationsCount(this.nativeRef);
        }
        private native I64Callback native_getOperationsCount(long _nativeRef);

        @Override
        public OperationCallback getOperation(String uid)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOperation(this.nativeRef, uid);
        }
        private native OperationCallback native_getOperation(long _nativeRef, String uid);

        @Override
        public AmountCallback getBalance()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBalance(this.nativeRef);
        }
        private native AmountCallback native_getBalance(long _nativeRef);

        @Override
        public boolean isSynchronizing()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isSynchronizing(this.nativeRef);
        }
        private native boolean native_isSynchronizing(long _nativeRef);

        @Override
        public EventBus synchronize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_synchronize(this.nativeRef);
        }
        private native EventBus native_synchronize(long _nativeRef);

        @Override
        public Preferences getPreferences()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPreferences(this.nativeRef);
        }
        private native Preferences native_getPreferences(long _nativeRef);

        @Override
        public boolean isInstanceOfBitcoinLikeAccount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfBitcoinLikeAccount(this.nativeRef);
        }
        private native boolean native_isInstanceOfBitcoinLikeAccount(long _nativeRef);

        @Override
        public boolean isInstanceOfEthereumLikeAccount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfEthereumLikeAccount(this.nativeRef);
        }
        private native boolean native_isInstanceOfEthereumLikeAccount(long _nativeRef);

        @Override
        public boolean isInstanceOfRippleLikeAccount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfRippleLikeAccount(this.nativeRef);
        }
        private native boolean native_isInstanceOfRippleLikeAccount(long _nativeRef);
    }
}
