// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Wallet {
    public abstract AccountListCallback getAccounts();

    public abstract AccountCallback getAccount(int index);

    public abstract I32Callback getAccountCount();

    public abstract EventBus getEventBus();

    public abstract boolean isSynchronizing();

    public abstract EventBus synchronize();

    public abstract Preferences getPreferences();

    /**
     * asBitcoinLikeWallet(): Callback<BitcoinLikeWallet>;
     * asEthereumLikeWallet(): Callback<EthereumLikeWallet>;
     * asRippleLikeWallet(): Callback<RippleLikeWallet>;
     */
    public abstract Currency getCurrency();

    public abstract boolean isInstanceOfBitcoinLikeWallet();

    public abstract boolean isInstanceOfEthereumLikeWallet();

    public abstract boolean isInstanceOfRippleLikeWallet();

    private static final class CppProxy extends Wallet
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public AccountListCallback getAccounts()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccounts(this.nativeRef);
        }
        private native AccountListCallback native_getAccounts(long _nativeRef);

        @Override
        public AccountCallback getAccount(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccount(this.nativeRef, index);
        }
        private native AccountCallback native_getAccount(long _nativeRef, int index);

        @Override
        public I32Callback getAccountCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAccountCount(this.nativeRef);
        }
        private native I32Callback native_getAccountCount(long _nativeRef);

        @Override
        public EventBus getEventBus()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getEventBus(this.nativeRef);
        }
        private native EventBus native_getEventBus(long _nativeRef);

        @Override
        public boolean isSynchronizing()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isSynchronizing(this.nativeRef);
        }
        private native boolean native_isSynchronizing(long _nativeRef);

        @Override
        public EventBus synchronize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_synchronize(this.nativeRef);
        }
        private native EventBus native_synchronize(long _nativeRef);

        @Override
        public Preferences getPreferences()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPreferences(this.nativeRef);
        }
        private native Preferences native_getPreferences(long _nativeRef);

        @Override
        public Currency getCurrency()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCurrency(this.nativeRef);
        }
        private native Currency native_getCurrency(long _nativeRef);

        @Override
        public boolean isInstanceOfBitcoinLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfBitcoinLikeWallet(this.nativeRef);
        }
        private native boolean native_isInstanceOfBitcoinLikeWallet(long _nativeRef);

        @Override
        public boolean isInstanceOfEthereumLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfEthereumLikeWallet(this.nativeRef);
        }
        private native boolean native_isInstanceOfEthereumLikeWallet(long _nativeRef);

        @Override
        public boolean isInstanceOfRippleLikeWallet()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isInstanceOfRippleLikeWallet(this.nativeRef);
        }
        private native boolean native_isInstanceOfRippleLikeWallet(long _nativeRef);
    }
}
