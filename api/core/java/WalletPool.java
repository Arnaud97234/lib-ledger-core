// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class WalletPool {
    public abstract ArrayList<WalletCommonInterface> getAllWallets();

    public abstract ArrayList<BitcoinLikeWallet> getAllBitcoinLikeWallets();

    public abstract ArrayList<EthereumLikeWallet> getAllEthereumLikeWallets();

    public abstract void getOrCreateBitcoinLikeWallet(BitcoinPublicKeyProvider publicKeyProvider, CryptoCurrencyDescription currency, GetBitcoinLikeWalletCallback callback);

    public abstract void getOrCreateEthereumLikeWallet(EthereumPublicKeyProvider publicKeyProvider, CryptoCurrencyDescription currency, GetEthreumLikeWalletCallback callback);

    public abstract ArrayList<CryptoCurrencyDescription> getAllSupportedCryptoCurrencies();

    public abstract Logger getLogger();

    public abstract void close();

    private static final class CppProxy extends WalletPool
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ArrayList<WalletCommonInterface> getAllWallets()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAllWallets(this.nativeRef);
        }
        private native ArrayList<WalletCommonInterface> native_getAllWallets(long _nativeRef);

        @Override
        public ArrayList<BitcoinLikeWallet> getAllBitcoinLikeWallets()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAllBitcoinLikeWallets(this.nativeRef);
        }
        private native ArrayList<BitcoinLikeWallet> native_getAllBitcoinLikeWallets(long _nativeRef);

        @Override
        public ArrayList<EthereumLikeWallet> getAllEthereumLikeWallets()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAllEthereumLikeWallets(this.nativeRef);
        }
        private native ArrayList<EthereumLikeWallet> native_getAllEthereumLikeWallets(long _nativeRef);

        @Override
        public void getOrCreateBitcoinLikeWallet(BitcoinPublicKeyProvider publicKeyProvider, CryptoCurrencyDescription currency, GetBitcoinLikeWalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getOrCreateBitcoinLikeWallet(this.nativeRef, publicKeyProvider, currency, callback);
        }
        private native void native_getOrCreateBitcoinLikeWallet(long _nativeRef, BitcoinPublicKeyProvider publicKeyProvider, CryptoCurrencyDescription currency, GetBitcoinLikeWalletCallback callback);

        @Override
        public void getOrCreateEthereumLikeWallet(EthereumPublicKeyProvider publicKeyProvider, CryptoCurrencyDescription currency, GetEthreumLikeWalletCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getOrCreateEthereumLikeWallet(this.nativeRef, publicKeyProvider, currency, callback);
        }
        private native void native_getOrCreateEthereumLikeWallet(long _nativeRef, EthereumPublicKeyProvider publicKeyProvider, CryptoCurrencyDescription currency, GetEthreumLikeWalletCallback callback);

        @Override
        public ArrayList<CryptoCurrencyDescription> getAllSupportedCryptoCurrencies()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAllSupportedCryptoCurrencies(this.nativeRef);
        }
        private native ArrayList<CryptoCurrencyDescription> native_getAllSupportedCryptoCurrencies(long _nativeRef);

        @Override
        public Logger getLogger()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLogger(this.nativeRef);
        }
        private native Logger native_getLogger(long _nativeRef);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);
    }
}
