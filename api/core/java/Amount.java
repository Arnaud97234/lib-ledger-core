// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from amount.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Amount {
    public abstract BigInt toBigInt();

    public abstract Currency getCurrency();

    public abstract CurrencyUnit getUnit();

    public abstract Amount toUnit(CurrencyUnit unit);

    public abstract String toString();

    public abstract long toLong();

    public abstract double toDouble();

    public abstract String format(Locale locale, FormatRules rules);

    private static final class CppProxy extends Amount
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public BigInt toBigInt()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toBigInt(this.nativeRef);
        }
        private native BigInt native_toBigInt(long _nativeRef);

        @Override
        public Currency getCurrency()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCurrency(this.nativeRef);
        }
        private native Currency native_getCurrency(long _nativeRef);

        @Override
        public CurrencyUnit getUnit()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUnit(this.nativeRef);
        }
        private native CurrencyUnit native_getUnit(long _nativeRef);

        @Override
        public Amount toUnit(CurrencyUnit unit)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toUnit(this.nativeRef, unit);
        }
        private native Amount native_toUnit(long _nativeRef, CurrencyUnit unit);

        @Override
        public String toString()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toString(this.nativeRef);
        }
        private native String native_toString(long _nativeRef);

        @Override
        public long toLong()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toLong(this.nativeRef);
        }
        private native long native_toLong(long _nativeRef);

        @Override
        public double toDouble()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toDouble(this.nativeRef);
        }
        private native double native_toDouble(long _nativeRef);

        @Override
        public String format(Locale locale, FormatRules rules)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_format(this.nativeRef, locale, rules);
        }
        private native String native_format(long _nativeRef, Locale locale, FormatRules rules);
    }
}
