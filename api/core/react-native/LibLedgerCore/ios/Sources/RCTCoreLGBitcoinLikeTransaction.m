// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "RCTCoreLGBitcoinLikeTransaction.h"


@implementation RCTCoreLGBitcoinLikeTransaction
//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeTransaction)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGBitcoinLikeTransaction alloc] init];
    }
    return self;
}

/**
 *Get transaction hash
 *@return string, transaction hash
 */
RCT_REMAP_METHOD(getHash,getHashWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getHash]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getHash", nil);
    }
}

/**
 *Get list of inputs aggregated under that transaction
 *@return list of BitcoinLikeInput objects
 */
RCT_REMAP_METHOD(getInputs,getInputsWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getInputs]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getInputs", nil);
    }
}

/**
 *Get list of outputs aggregated under that transaction
 *@return list of BitcoinLikeOutput objects
 */
RCT_REMAP_METHOD(getOutputs,getOutputsWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getOutputs]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getOutputs", nil);
    }
}

/**
 *Get block to which this transaction belongs
 *@return Optional BitcoinLikeBlock
 */
RCT_REMAP_METHOD(getBlock,getBlockWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getBlock]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getBlock", nil);
    }
}

/**
 *Get lock time of transaction, block height from which transaction may be accepted by miners
 *@return 64 bits integer, block height after which transaction can be accepted
 */
RCT_REMAP_METHOD(getLockTime,getLockTimeWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl getLockTime])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getLockTime", nil);
    }
}

/**
 *Get fees payed for this transaction
 *@return Amount object, amount of fees
 */
RCT_REMAP_METHOD(getFees,getFeesWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getFees]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getFees", nil);
    }
}

/**
 *Get time of creation of this transaction
 *@return Date object
 */
RCT_REMAP_METHOD(getTime,getTimeWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getTime]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeTransaction::getTime", nil);
    }
}
@end
