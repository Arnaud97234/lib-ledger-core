// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "RCTCoreLGDerivationPath.h"


@implementation RCTCoreLGDerivationPath
//Export module
RCT_EXPORT_MODULE(RCTCoreLGDerivationPath)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGDerivationPath alloc] init];
    }
    return self;
}

/** Get the number of element in this path. */
RCT_REMAP_METHOD(getDepth,getDepthWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl getDepth])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::getDepth", nil);
    }
}

/** Get the child num at the given index in the path. */
RCT_REMAP_METHOD(getChildNum,getChildNum:(int32_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl getChildNum:index])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::getChildNum", nil);
    }
}

/**
 * Get the child num at the given index in the path. If the child num is hardened, returns it
 * without the hardened marker bit.
 */
RCT_REMAP_METHOD(getUnhardenedChildNum,getUnhardenedChildNum:(int32_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl getUnhardenedChildNum:index])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::getUnhardenedChildNum", nil);
    }
}

/** Return true if the given index in the path is an hardened child num. */
RCT_REMAP_METHOD(isHardened,isHardened:(int32_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl isHardened:index])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::isHardened", nil);
    }
}

/** Serialize the given path to a human readable string like "44'/0'/0'/0/0" */
RCT_REMAP_METHOD(toString,toStringWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl toString]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::toString", nil);
    }
}

/**
 * Return a derivation path without the last element, e.g. the parent of "44'/0'/0'/0/0" is
 * "44'/0'/0'/0"
 */
RCT_REMAP_METHOD(getParent,getParentWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getParent]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::getParent", nil);
    }
}

/** Return an array where which item is a child num of the path. */
RCT_REMAP_METHOD(toArray,toArrayWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl toArray]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::toArray", nil);
    }
}

RCT_REMAP_METHOD(parse,parse:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGDerivationPath parse:path]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDerivationPath::parse", nil);
    }
}
@end
