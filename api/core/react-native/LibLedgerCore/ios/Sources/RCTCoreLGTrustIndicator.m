// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "RCTCoreLGTrustIndicator.h"


@implementation RCTCoreLGTrustIndicator
//Export module
RCT_EXPORT_MODULE(RCTCoreLGTrustIndicator)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGTrustIndicator alloc] init];
    }
    return self;
}

RCT_REMAP_METHOD(getTrustWeight,getTrustWeightWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getTrustWeight];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGTrustIndicator::getTrustWeight", nil);
    }
}

RCT_REMAP_METHOD(getTrustLevel,getTrustLevelWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getTrustLevel];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGTrustIndicator::getTrustLevel", nil);
    }
}

RCT_REMAP_METHOD(getConflictingOperationUids,getConflictingOperationUidsWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getConflictingOperationUids];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGTrustIndicator::getConflictingOperationUids", nil);
    }
}

RCT_REMAP_METHOD(getOrigin,getOriginWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getOrigin];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGTrustIndicator::getOrigin", nil);
    }
}
@end
