// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#import "RCTCoreLGPreferences.h"


@implementation RCTCoreLGPreferences
//Export module
RCT_EXPORT_MODULE(RCTCoreLGPreferences)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGPreferences alloc] init];
    }
    return self;
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getString,getString:(nonnull NSString *)key
                       fallbackValue:(nonnull NSString *)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getString:key fallbackValue:fallbackValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::getString", nil);
    }
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getInt,getInt:(nonnull NSString *)key
                 fallbackValue:(int32_t)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getInt:key fallbackValue:fallbackValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::getInt", nil);
    }
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getLong,getLong:(nonnull NSString *)key
                   fallbackValue:(int64_t)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getLong:key fallbackValue:fallbackValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::getLong", nil);
    }
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getBoolean,getBoolean:(nonnull NSString *)key
                         fallbackValue:(BOOL)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getBoolean:key fallbackValue:fallbackValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::getBoolean", nil);
    }
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getStringArray,getStringArray:(nonnull NSString *)key
                                 fallbackValue:(nonnull NSArray<NSString *> *)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getStringArray:key fallbackValue:fallbackValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::getStringArray", nil);
    }
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getData,getData:(nonnull NSString *)key
                   fallbackValue:(nonnull NSData *)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getData:key fallbackValue:fallbackValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::getData", nil);
    }
}

/**
 * Checks whether the Preferences contains the given key.
 * @return true the preferences contains the key, false otherwise.
 */
RCT_REMAP_METHOD(contains,contains:(nonnull NSString *)key withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl contains:key];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::contains", nil);
    }
}

/**
 * Get a preferences editor in order to add/modify/remove data.
 * @return An interface for editting preferences.
 */
RCT_REMAP_METHOD(edit,editWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl edit];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferences::edit", nil);
    }
}
@end
