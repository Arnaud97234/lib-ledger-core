// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "RCTCoreLGBitcoinLikeOutput.h"


@implementation RCTCoreLGBitcoinLikeOutput
//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeOutput)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGBitcoinLikeOutput alloc] init];
    }
    return self;
}

/**
 *Get transaction hash in which output was 'created'
 *@return String, transaction hash containing output
 */
RCT_REMAP_METHOD(getTransactionHash,getTransactionHashWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getTransactionHash];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeOutput::getTransactionHash", nil);
    }
}

/**
 *Get index of output in list of all outputs contained in same transaction
 *@return 32 bits integer, index of output
 */
RCT_REMAP_METHOD(getOutputIndex,getOutputIndexWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getOutputIndex];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeOutput::getOutputIndex", nil);
    }
}

/**
 *Get amount of output
 *@return Amount object, amount of output
 */
RCT_REMAP_METHOD(getValue,getValueWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getValue];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeOutput::getValue", nil);
    }
}

/**
 *Get script (witness script) cryptographic puzzle that determines the conditions to spend the output
 *@return in Bytes (variable size depending on type of script P2PKH, P2SH), locking script to spend UTXO
 */
RCT_REMAP_METHOD(getScript,getScriptWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getScript];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeOutput::getScript", nil);
    }
}

/**
 *Get address that spent the output
 *@return Optional String, address that spent
 */
RCT_REMAP_METHOD(getAddress,getAddressWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getAddress];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeOutput::getAddress", nil);
    }
}
@end
