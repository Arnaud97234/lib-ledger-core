// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#import "RCTCoreLGPreferencesEditor.h"


@implementation RCTCoreLGPreferencesEditor
//Export module
RCT_EXPORT_MODULE(RCTCoreLGPreferencesEditor)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGPreferencesEditor alloc] init];
    }
    return self;
}

/**
 * Sets the value to the given key in the Preferences.
 * @param key The data key.
 * @param value The value to store
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(putString,putString:(nonnull NSString *)key
                               value:(nonnull NSString *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl putString:key value:value];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::putString", nil);
    }
}

/**
 * Sets the value to the given key in the Preferences.
 * @param key The data key.
 * @param value The value to store
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(putInt,putInt:(nonnull NSString *)key
                         value:(int32_t)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl putInt:key value:value];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::putInt", nil);
    }
}

/**
 * Sets the value to the given key in the Preferences.
 * @param key The data key.
 * @param value The value to store
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(putLong,putLong:(nonnull NSString *)key
                           value:(int64_t)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl putLong:key value:value];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::putLong", nil);
    }
}

/**
 * Sets the value to the given key in the Preferences.
 * @param key The data key.
 * @param value The value to store
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(putBoolean,putBoolean:(nonnull NSString *)key
                                 value:(BOOL)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl putBoolean:key value:value];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::putBoolean", nil);
    }
}

/**
 * Sets the value to the given key in the Preferences.
 * @param key The data key.
 * @param value The value to store
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(putStringArray,putStringArray:(nonnull NSString *)key
                                         value:(nonnull NSArray<NSString *> *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl putStringArray:key value:value];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::putStringArray", nil);
    }
}

/**
 * Sets the value to the given key in the Preferences.
 * @param key The data key.
 * @param value The value to store
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(putData,putData:(nonnull NSString *)key
                           value:(nonnull NSData *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl putData:key value:value];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::putData", nil);
    }
}

/**
 * Removes the data associated with the given key.
 * @param key The key to remove from the Preferences
 * @return The reference of self in order to chain the call to the editor.
 */
RCT_REMAP_METHOD(remove,remove:(nonnull NSString *)key withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl remove:key];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPreferencesEditor::remove", nil);
    }
}

/** Persists the changes to the Preferences. */
RCT_EXPORT_METHOD(commit) {

    [self.objcImpl commit];
}
@end
