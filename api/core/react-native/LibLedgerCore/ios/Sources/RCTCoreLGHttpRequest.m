// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http_client.djinni

#import "RCTCoreLGHttpRequest.h"


@implementation RCTCoreLGHttpRequest
//Export module
RCT_EXPORT_MODULE(RCTCoreLGHttpRequest)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGHttpRequest alloc] init];
    }
    return self;
}

/**
 *Get method of request
 *@return HttpMethod enum entry
 */
RCT_REMAP_METHOD(getMethod,getMethodWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getMethod];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHttpRequest::getMethod", nil);
    }
}

/**
 *Get headers set in the request
 *@return Map with key and value of type string
 */
RCT_REMAP_METHOD(getHeaders,getHeadersWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getHeaders];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHttpRequest::getHeaders", nil);
    }
}

/**
 *Get body of request
 *@return binary
 */
RCT_REMAP_METHOD(getBody,getBodyWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getBody];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHttpRequest::getBody", nil);
    }
}

/**
 *Get Url of request
 *@return string
 */
RCT_REMAP_METHOD(getUrl,getUrlWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getUrl];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHttpRequest::getUrl", nil);
    }
}

/**
 *Method called when reauest is completed
 *@param response, Optional HttpUrlConnection object, response of request if succeed
 *@param error, optional Error structure, error returned in case of request failure
 */
RCT_REMAP_METHOD(complete,complete:(nullable id<LGHttpUrlConnection>)response
                             error:(nullable LGError *)error) {

    [self.objcImpl complete:response error:error];
}
@end
