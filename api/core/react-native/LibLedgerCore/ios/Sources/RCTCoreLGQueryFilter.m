// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "RCTCoreLGQueryFilter.h"


@implementation RCTCoreLGQueryFilter
//Export module
RCT_EXPORT_MODULE(RCTCoreLGQueryFilter)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGQueryFilter alloc] init];
    }
    return self;
}

RCT_REMAP_METHOD(accountEq,accountEq:(nonnull NSString *)accountUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter accountEq:accountUid]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::accountEq", nil);
    }
}

RCT_REMAP_METHOD(accountNeq,accountNeq:(nonnull NSString *)accountUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter accountNeq:accountUid]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::accountNeq", nil);
    }
}

RCT_REMAP_METHOD(dateLte,dateLte:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter dateLte:time]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::dateLte", nil);
    }
}

RCT_REMAP_METHOD(dateLt,dateLt:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter dateLt:time]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::dateLt", nil);
    }
}

RCT_REMAP_METHOD(dateGt,dateGt:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter dateGt:time]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::dateGt", nil);
    }
}

RCT_REMAP_METHOD(dateGte,dateGte:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter dateGte:time]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::dateGte", nil);
    }
}

RCT_REMAP_METHOD(dateEq,dateEq:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter dateEq:time]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::dateEq", nil);
    }
}

RCT_REMAP_METHOD(dateNeq,dateNeq:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter dateNeq:time]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::dateNeq", nil);
    }
}

RCT_REMAP_METHOD(containsRecipient,containsRecipient:(nonnull NSString *)recipientAddress withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter containsRecipient:recipientAddress]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::containsRecipient", nil);
    }
}

RCT_REMAP_METHOD(containsSender,containsSender:(nonnull NSString *)senderAddress withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter containsSender:senderAddress]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::containsSender", nil);
    }
}

RCT_REMAP_METHOD(currencyEq,currencyEq:(nonnull NSString *)currencyName withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter currencyEq:currencyName]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::currencyEq", nil);
    }
}

RCT_REMAP_METHOD(operationUidEq,operationUidEq:(nonnull NSString *)operationUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter operationUidEq:operationUid]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::operationUidEq", nil);
    }
}

RCT_REMAP_METHOD(operationUidNeq,operationUidNeq:(nonnull NSString *)operationUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter operationUidNeq:operationUid]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::operationUidNeq", nil);
    }
}

RCT_REMAP_METHOD(trustEq,trustEq:(LGTrustLevel)trust withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter trustEq:trust]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::trustEq", nil);
    }
}

RCT_REMAP_METHOD(trustNeq,trustNeq:(LGTrustLevel)trust withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter trustNeq:trust]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::trustNeq", nil);
    }
}

RCT_REMAP_METHOD(feesEq,feesEq:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter feesEq:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::feesEq", nil);
    }
}

RCT_REMAP_METHOD(feesNeq,feesNeq:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter feesNeq:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::feesNeq", nil);
    }
}

RCT_REMAP_METHOD(feesGte,feesGte:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter feesGte:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::feesGte", nil);
    }
}

RCT_REMAP_METHOD(feesGt,feesGt:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter feesGt:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::feesGt", nil);
    }
}

RCT_REMAP_METHOD(feesLte,feesLte:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter feesLte:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::feesLte", nil);
    }
}

RCT_REMAP_METHOD(feesLt,feesLt:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter feesLt:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::feesLt", nil);
    }
}

RCT_REMAP_METHOD(amountEq,amountEq:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter amountEq:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::amountEq", nil);
    }
}

RCT_REMAP_METHOD(amountNeq,amountNeq:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter amountNeq:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::amountNeq", nil);
    }
}

RCT_REMAP_METHOD(amountGte,amountGte:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter amountGte:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::amountGte", nil);
    }
}

RCT_REMAP_METHOD(amountGt,amountGt:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter amountGt:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::amountGt", nil);
    }
}

RCT_REMAP_METHOD(amountLte,amountLte:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter amountLte:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::amountLte", nil);
    }
}

RCT_REMAP_METHOD(amountLt,amountLt:(nullable LGAmount *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter amountLt:amount]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::amountLt", nil);
    }
}

RCT_REMAP_METHOD(blockHeightEq,blockHeightEq:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightEq:blockHeight]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightEq", nil);
    }
}

RCT_REMAP_METHOD(blockHeightNeq,blockHeightNeq:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightNeq:blockHeight]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightNeq", nil);
    }
}

RCT_REMAP_METHOD(blockHeightGte,blockHeightGte:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightGte:blockHeight]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightGte", nil);
    }
}

RCT_REMAP_METHOD(blockHeightGt,blockHeightGt:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightGt:blockHeight]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightGt", nil);
    }
}

RCT_REMAP_METHOD(blockHeightLte,blockHeightLte:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightLte:blockHeight]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightLte", nil);
    }
}

RCT_REMAP_METHOD(blockHeightLt,blockHeightLt:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightLt:blockHeight]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightLt", nil);
    }
}

RCT_REMAP_METHOD(blockHeightIsNull,blockHeightIsNullWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter blockHeightIsNull]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::blockHeightIsNull", nil);
    }
}

RCT_REMAP_METHOD(operationTypeEq,operationTypeEq:(LGOperationType)operationType withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter operationTypeEq:operationType]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::operationTypeEq", nil);
    }
}

RCT_REMAP_METHOD(operationTypeNeq,operationTypeNeq:(LGOperationType)operationType withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGQueryFilter operationTypeNeq:operationType]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::operationTypeNeq", nil);
    }
}

RCT_REMAP_METHOD(opAnd,opAnd:(nullable LGQueryFilter *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl opAnd:filter]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::opAnd", nil);
    }
}

RCT_REMAP_METHOD(opOr,opOr:(nullable LGQueryFilter *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl opOr:filter]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::opOr", nil);
    }
}

RCT_REMAP_METHOD(opAndNot,opAndNot:(nullable LGQueryFilter *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl opAndNot:filter]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::opAndNot", nil);
    }
}

RCT_REMAP_METHOD(opOrNot,opOrNot:(nullable LGQueryFilter *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl opOrNot:filter]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGQueryFilter::opOrNot", nil);
    }
}
@end
