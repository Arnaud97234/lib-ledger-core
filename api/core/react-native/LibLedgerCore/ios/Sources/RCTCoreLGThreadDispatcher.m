// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

#import "RCTCoreLGThreadDispatcher.h"


@implementation RCTCoreLGThreadDispatcher
//Export module
RCT_EXPORT_MODULE(RCTCoreLGThreadDispatcher)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGThreadDispatcherImpl alloc] init];
    }
    return self;
}

/**
 *Get an execution context where tasks are executed sequentially
 *@param name, string, name of execution context to retrieve
 *@return ExecutionContext object
 */
RCT_REMAP_METHOD(getSerialExecutionContext,getSerialExecutionContext:(nonnull NSString *)name withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getSerialExecutionContext:name];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGThreadDispatcherImpl::getSerialExecutionContext", nil);
    }
}

/**
 *Get an execution context where tasks are executed in parallel thanks to a thread pool
 *where a system of inter-thread communication was designed
 *@param name, string, name of execution context to retrieve
 *@return ExecutionContext object
 */
RCT_REMAP_METHOD(getThreadPoolExecutionContext,getThreadPoolExecutionContext:(nonnull NSString *)name withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getThreadPoolExecutionContext:name];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGThreadDispatcherImpl::getThreadPoolExecutionContext", nil);
    }
}

/**
 *Get main execution context (generally where tasks that should never get blocked are executed)
 *@return ExecutionContext object
 */
RCT_REMAP_METHOD(getMainExecutionContext,getMainExecutionContextWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl getMainExecutionContext];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGThreadDispatcherImpl::getMainExecutionContext", nil);
    }
}

/**
 *Get lock to handle multithreading
 *@return Lock object
 */
RCT_REMAP_METHOD(newLock,newLockWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl newLock];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGThreadDispatcherImpl::newLock", nil);
    }
}
@end
