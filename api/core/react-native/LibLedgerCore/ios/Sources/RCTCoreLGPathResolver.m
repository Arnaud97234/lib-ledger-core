// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from path_resolver.djinni

#import "RCTCoreLGPathResolver.h"


@implementation RCTCoreLGPathResolver
//Export module
RCT_EXPORT_MODULE(RCTCoreLGPathResolver)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGPathResolverImpl alloc] init];
    }
    return self;
}

/**
 * Resolves the path for a SQLite database file.
 * @param path The path to resolve.
 * @return The resolved path.
 */
RCT_REMAP_METHOD(resolveDatabasePath,resolveDatabasePath:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl resolveDatabasePath:path];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPathResolverImpl::resolveDatabasePath", nil);
    }
}

/**
 * Resolves the path of a single log file.
 * @param path The path to resolve.
 * @return The resolved path.
 */
RCT_REMAP_METHOD(resolveLogFilePath,resolveLogFilePath:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl resolveLogFilePath:path];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPathResolverImpl::resolveLogFilePath", nil);
    }
}

/**
 * Resolves the path for a json file.
 * @param path The path to resolve.
 * @return The resolved path.
 */
RCT_REMAP_METHOD(resolvePreferencesPath,resolvePreferencesPath:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl resolvePreferencesPath:path];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGPathResolverImpl::resolvePreferencesPath", nil);
    }
}
@end
