// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_script.djinni

#import "RCTCoreLGBitcoinLikeScriptChunk.h"


@implementation RCTCoreLGBitcoinLikeScriptChunk
//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeScriptChunk)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGBitcoinLikeScriptChunk alloc] init];
    }
    return self;
}

RCT_REMAP_METHOD(isOperator,isOperatorWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl isOperator])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeScriptChunk::isOperator", nil);
    }
}

RCT_REMAP_METHOD(isPushedData,isPushedDataWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl isPushedData])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeScriptChunk::isPushedData", nil);
    }
}

RCT_REMAP_METHOD(getOperator,getOperatorWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getOperator]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeScriptChunk::getOperator", nil);
    }
}

RCT_REMAP_METHOD(getPushedData,getPushedDataWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getPushedData]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeScriptChunk::getPushedData", nil);
    }
}

RCT_REMAP_METHOD(next,nextWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl next]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeScriptChunk::next", nil);
    }
}

RCT_REMAP_METHOD(hasNext,hasNextWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl hasNext])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGBitcoinLikeScriptChunk::hasNext", nil);
    }
}
@end
