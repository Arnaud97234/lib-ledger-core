// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "RCTCoreLGBitcoinLikeAccount.h"


@implementation RCTCoreLGBitcoinLikeAccount
//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeAccount)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGBitcoinLikeAccount alloc] init];
    }
    return self;
}

/**
 *Get UTXOs of account in a given range
 *@param from, integer, lower bound for account's UTXO's index
 *@param to, integer, upper bound for account's UTXO's index
 *@param callback, ListCallback object which returns a list of BitcoinLikeOutput if getUTXO succeed
 */
RCT_REMAP_METHOD(getUTXO,getUTXO:(int32_t)from
                              to:(int32_t)to
                        callback:(nullable id<LGBitcoinLikeOutputListCallback>)callback) {

    [self.objcImpl getUTXO:from to:to callback:callback];
}

/**
 *Get UTXOs count of account
 *@param callback, Callback object which returns number of UTXO owned by this account
 */
RCT_REMAP_METHOD(getUTXOCount,getUTXOCount:(nullable id<LGI32Callback>)callback) {

    [self.objcImpl getUTXOCount:callback];
}

/**
 *Get UTXOs meeting certain requirements to form a transaction request object
 *@param baseFees, Amount object, amount of base fees that the transaction will cost
 *@param outputs, List of BitcoinLikeOutput objects, outputs from which we will pick to construct the transaction
 *@param strategy, BitcoinLikePickingStrategy object, determine strategy followed to pick outputs to spend
 *@param callback, Callback object which returns the constructed transaction (BitcoinLikeTransactionRequest object)
 */
RCT_REMAP_METHOD(pickUTXO,pickUTXO:(nullable LGAmount *)baseFees
                           outputs:(nonnull NSArray<LGBitcoinLikeOutput *> *)outputs
                          strategy:(LGBitcoinLikePickingStrategy)strategy
                          callback:(nullable id<LGBitcoinLikeTransactionRequestCallback>)callback) {

    [self.objcImpl pickUTXO:baseFees outputs:outputs strategy:strategy callback:callback];
}

/**
 *Get an estimation of fees given a transaction
 *@param request, BitcoinLikeTransactionRequest object, request without totalFees set
 *@param callback, Callback returning BitcoinLikeTransactionRequest object with totalFees set if estimateFees succeed
 */
RCT_REMAP_METHOD(estimateFees,estimateFees:(nonnull LGBitcoinLikeTransactionRequest *)request
                                  callback:(nullable id<LGBitcoinLikeTransactionRequestCallback>)callback) {

    [self.objcImpl estimateFees:request callback:callback];
}

/**
 *Prepare a raw transaction to be used by user
 *@param request, BitcoinLikeTransactionRequest object, raw transaction object
 *@param callback, Callback object returning, is case of success of prepareTransaction, a BitcoinLikePreparedTransaction object which is an usable transaction
 */
RCT_REMAP_METHOD(prepareTransaction,prepareTransaction:(nonnull LGBitcoinLikeTransactionRequest *)request
                                              callback:(nullable id<LGBitcoinLikePreparedTransactionCallback>)callback) {

    [self.objcImpl prepareTransaction:request callback:callback];
}

/**
 *Broadcast transaction to Bitcoin network (to nodes)
 *@param transaction, serialized transaction to broadcast
 *@param callback, Callback object which returning a string result
 */
RCT_REMAP_METHOD(broadcastTransaction,broadcastTransaction:(nonnull NSData *)transaction
                                                  callback:(nullable id<LGStringCallback>)callback) {

    [self.objcImpl broadcastTransaction:transaction callback:callback];
}
@end
