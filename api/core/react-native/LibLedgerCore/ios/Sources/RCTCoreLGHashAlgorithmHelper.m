// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from crypto.djinni

#import "RCTCoreLGHashAlgorithmHelper.h"


@implementation RCTCoreLGHashAlgorithmHelper
//Export module
RCT_EXPORT_MODULE(RCTCoreLGHashAlgorithmHelper)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGHashAlgorithmHelperImpl alloc] init];
    }
    return self;
}

/**
 *RACE Integrity Primitives Evaluation Message Digest (used in Bitcoin)
 *@param data in bytes, message to hash
 *@return 160 bits hashed message
 */
RCT_REMAP_METHOD(ripemd160,ripemd160:(nonnull NSData *)data withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl ripemd160:data];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHashAlgorithmHelperImpl::ripemd160", nil);
    }
}

/**
 *Secure Hash Algorithm (used in Bitcoin)
 *@param data in bytes, message to hash
 *@return 256 bits hashed message
 */
RCT_REMAP_METHOD(sha256,sha256:(nonnull NSData *)data withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl sha256:data];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHashAlgorithmHelperImpl::sha256", nil);
    }
}

/**
 *Hash algorithm used in ethereum
 *@param data in bytes, message to hash
 *@return 256 bits hashed message
 */
RCT_REMAP_METHOD(keccak256,keccak256:(nonnull NSData *)data withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = [self.objcImpl keccak256:data];
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGHashAlgorithmHelperImpl::keccak256", nil);
    }
}
@end
