// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from configuration.djinni

#import "LGConfiguration+Private.h"
#import "LGConfiguration.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGConfiguration ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Configuration>&)cppRef;

@end

@implementation LGConfiguration {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::Configuration>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Configuration>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getString:(nonnull NSString *)key
                       fallback:(nonnull NSString *)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getString(::djinni::String::toCpp(key),
                                                             ::djinni::String::toCpp(fallback));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGConfiguration *)putString:(nonnull NSString *)key
                                  value:(nonnull NSString *)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putString(::djinni::String::toCpp(key),
                                                             ::djinni::String::toCpp(value));
        return ::djinni_generated::Configuration::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getInt:(nonnull NSString *)key
         fallback:(int32_t)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getInt(::djinni::String::toCpp(key),
                                                          ::djinni::I32::toCpp(fallback));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGConfiguration *)putInt:(nonnull NSString *)key
                               value:(int32_t)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putInt(::djinni::String::toCpp(key),
                                                          ::djinni::I32::toCpp(value));
        return ::djinni_generated::Configuration::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)getBoolean:(nonnull NSString *)key
          fallback:(BOOL)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBoolean(::djinni::String::toCpp(key),
                                                              ::djinni::Bool::toCpp(fallback));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGConfiguration *)putBoolean:(nonnull NSString *)key
                                   value:(BOOL)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putBoolean(::djinni::String::toCpp(key),
                                                              ::djinni::Bool::toCpp(value));
        return ::djinni_generated::Configuration::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getData:(nonnull NSString *)key
                   fallback:(nonnull NSData *)fallback {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getData(::djinni::String::toCpp(key),
                                                           ::djinni::Binary::toCpp(fallback));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGConfiguration *)putData:(nonnull NSString *)key
                                 data:(nonnull NSData *)data {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putData(::djinni::String::toCpp(key),
                                                           ::djinni::Binary::toCpp(data));
        return ::djinni_generated::Configuration::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGConfiguration *)newInstance {
    try {
        auto objcpp_result_ = ::ledger::core::api::Configuration::newInstance();
        return ::djinni_generated::Configuration::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Configuration::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Configuration::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGConfiguration>(cpp);
}

}  // namespace djinni_generated

@end
