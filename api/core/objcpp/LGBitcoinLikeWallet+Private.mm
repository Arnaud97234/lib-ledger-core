// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "LGBitcoinLikeWallet+Private.h"
#import "LGBitcoinLikeWallet.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAccountCallback+Private.h"
#import "LGBitcoinLikeExtendedPublicKeyProvider+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGBitcoinLikeWallet ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeWallet>&)cppRef;

@end

@implementation LGBitcoinLikeWallet {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::BitcoinLikeWallet>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeWallet>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)createNewAccount:(int32_t)index
            xpubProvider:(nullable LGBitcoinLikeExtendedPublicKeyProvider *)xpubProvider
                callback:(nullable id<LGAccountCallback>)callback {
    try {
        _cppRefHandle.get()->createNewAccount(::djinni::I32::toCpp(index),
                                              ::djinni_generated::BitcoinLikeExtendedPublicKeyProvider::toCpp(xpubProvider),
                                              ::djinni_generated::AccountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createNextAccount:(nullable LGBitcoinLikeExtendedPublicKeyProvider *)xpubProvider
                 callback:(nullable id<LGAccountCallback>)callback {
    try {
        _cppRefHandle.get()->createNextAccount(::djinni_generated::BitcoinLikeExtendedPublicKeyProvider::toCpp(xpubProvider),
                                               ::djinni_generated::AccountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto BitcoinLikeWallet::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto BitcoinLikeWallet::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGBitcoinLikeWallet>(cpp);
}

}  // namespace djinni_generated

@end
