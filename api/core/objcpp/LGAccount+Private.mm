// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "LGAccount+Private.h"
#import "LGAccount.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAmountCallback+Private.h"
#import "LGEventBus+Private.h"
#import "LGI64Callback+Private.h"
#import "LGOperationCallback+Private.h"
#import "LGOperationListCallback+Private.h"
#import "LGPreferences+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGAccount ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Account>&)cppRef;

@end

@implementation LGAccount {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::Account>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Account>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)getIndex {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getIndex();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<LGOperationListCallback>)getOperations:(int32_t)from
                                                   to:(int32_t)to
                                           descending:(BOOL)descending {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOperations(::djinni::I32::toCpp(from),
                                                                 ::djinni::I32::toCpp(to),
                                                                 ::djinni::Bool::toCpp(descending));
        return ::djinni_generated::OperationListCallback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<LGI64Callback>)getOperationsCount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOperationsCount();
        return ::djinni_generated::I64Callback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<LGOperationCallback>)getOperation:(nonnull NSString *)uid {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOperation(::djinni::String::toCpp(uid));
        return ::djinni_generated::OperationCallback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<LGAmountCallback>)getBalance {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBalance();
        return ::djinni_generated::AmountCallback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isSynchronizing {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isSynchronizing();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGEventBus *)synchronize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->synchronize();
        return ::djinni_generated::EventBus::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGPreferences *)getPreferences {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreferences();
        return ::djinni_generated::Preferences::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isInstanceOfBitcoinLikeAccount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isInstanceOfBitcoinLikeAccount();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isInstanceOfEthereumLikeAccount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isInstanceOfEthereumLikeAccount();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isInstanceOfRippleLikeAccount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isInstanceOfRippleLikeAccount();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Account::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Account::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGAccount>(cpp);
}

}  // namespace djinni_generated

@end
