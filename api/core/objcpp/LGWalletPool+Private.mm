// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

#import "LGWalletPool+Private.h"
#import "LGWalletPool.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGBitcoinLikeExtendedPublicKeyProvider+Private.h"
#import "LGConfiguration+Private.h"
#import "LGCryptoCurrencyDescription+Private.h"
#import "LGGetBitcoinLikeWalletCallback+Private.h"
#import "LGLogger+Private.h"
#import "LGPreferences+Private.h"
#import "LGStringArrayCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGWalletPool ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::WalletPool>&)cppRef;

@end

@implementation LGWalletPool {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::WalletPool>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::WalletPool>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)getOrCreateBitcoinLikeWallet:(nullable LGBitcoinLikeExtendedPublicKeyProvider *)publicKeyProvider
                            currency:(nullable LGCryptoCurrencyDescription *)currency
                       configuration:(nullable LGConfiguration *)configuration
                            callback:(nullable id<LGGetBitcoinLikeWalletCallback>)callback {
    try {
        _cppRefHandle.get()->getOrCreateBitcoinLikeWallet(::djinni_generated::BitcoinLikeExtendedPublicKeyProvider::toCpp(publicKeyProvider),
                                                          ::djinni::Optional<std::experimental::optional, ::djinni_generated::CryptoCurrencyDescription>::toCpp(currency),
                                                          ::djinni_generated::Configuration::toCpp(configuration),
                                                          ::djinni_generated::GetBitcoinLikeWalletCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getAllBitcoinLikeWalletIdentifiers:(nullable id<LGStringArrayCallback>)callback {
    try {
        _cppRefHandle.get()->getAllBitcoinLikeWalletIdentifiers(::djinni_generated::StringArrayCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getBitcoinLikeWallet:(nonnull NSString *)identifier
                    callback:(nullable id<LGGetBitcoinLikeWalletCallback>)callback {
    try {
        _cppRefHandle.get()->getBitcoinLikeWallet(::djinni::String::toCpp(identifier),
                                                  ::djinni_generated::GetBitcoinLikeWalletCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<LGCryptoCurrencyDescription *> *)getAllSupportedCryptoCurrencies {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAllSupportedCryptoCurrencies();
        return ::djinni::List<::djinni_generated::CryptoCurrencyDescription>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGLogger *)getLogger {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getLogger();
        return ::djinni_generated::Logger::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGPreferences *)getPreferences {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreferences();
        return ::djinni_generated::Preferences::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getWalletPreferences:(nonnull NSString *)walletIdentifier {
    try {
        _cppRefHandle.get()->getWalletPreferences(::djinni::String::toCpp(walletIdentifier));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto WalletPool::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto WalletPool::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGWalletPool>(cpp);
}

}  // namespace djinni_generated

@end
