// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "LGWallet+Private.h"
#import "LGWallet.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAccountCallback+Private.h"
#import "LGAccountListCallback+Private.h"
#import "LGCurrency+Private.h"
#import "LGEventBus+Private.h"
#import "LGI32Callback+Private.h"
#import "LGPreferences+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGWallet ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Wallet>&)cppRef;

@end

@implementation LGWallet {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::Wallet>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Wallet>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable id<LGAccountListCallback>)getAccounts {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccounts();
        return ::djinni_generated::AccountListCallback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<LGAccountCallback>)getAccount:(int32_t)index {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccount(::djinni::I32::toCpp(index));
        return ::djinni_generated::AccountCallback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<LGI32Callback>)getAccountCount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccountCount();
        return ::djinni_generated::I32Callback::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGEventBus *)getEventBus {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getEventBus();
        return ::djinni_generated::EventBus::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isSynchronizing {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isSynchronizing();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGEventBus *)synchronize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->synchronize();
        return ::djinni_generated::EventBus::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGPreferences *)getPreferences {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreferences();
        return ::djinni_generated::Preferences::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGCurrency *)getCurrency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCurrency();
        return ::djinni_generated::Currency::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isInstanceOfBitcoinLikeWallet {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isInstanceOfBitcoinLikeWallet();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isInstanceOfEthereumLikeWallet {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isInstanceOfEthereumLikeWallet();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isInstanceOfRippleLikeWallet {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isInstanceOfRippleLikeWallet();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Wallet::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Wallet::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGWallet>(cpp);
}

}  // namespace djinni_generated

@end
