// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

#import "LGLock+Private.h"
#import "LGLock.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class Lock::ObjcProxy final
: public ::ledger::core::api::Lock
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void lock() override
    {
        @autoreleasepool {
            [Handle::get() lock];
        }
    }
    bool tryLock() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [Handle::get() tryLock];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    void unlock() override
    {
        @autoreleasepool {
            [Handle::get() unlock];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Lock::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Lock::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
