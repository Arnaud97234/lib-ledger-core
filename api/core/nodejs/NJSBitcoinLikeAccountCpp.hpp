// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKEACCOUNT_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKEACCOUNT_HPP


#include "NJSBitcoinLikeOutputListCallback.hpp"
#include "NJSBitcoinLikeTransactionBuilderCpp.hpp"
#include "NJSBitcoinLikeTransactionCpp.hpp"
#include "NJSI32Callback.hpp"
#include "NJSStringCallback.hpp"
#include <cstdint>
#include <memory>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/BitcoinLikeAccount.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeAccount: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSBitcoinLikeAccount() {};
    NJSBitcoinLikeAccount(const std::shared_ptr<ledger::core::api::BitcoinLikeAccount> &iBitcoinLikeAccount):_BitcoinLikeAccount(iBitcoinLikeAccount){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeAccount> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeAccount_prototype;
    std::shared_ptr<ledger::core::api::BitcoinLikeAccount> getCppImpl(){return _BitcoinLikeAccount;};

private:
    static NAN_METHOD(getUTXO);

    static NAN_METHOD(getUTXOCount);

    static NAN_METHOD(broadcastRawTransaction);

    static NAN_METHOD(broadcastTransaction);

    static NAN_METHOD(buildTransaction);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::BitcoinLikeAccount> _BitcoinLikeAccount;
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKEACCOUNT_HPP
