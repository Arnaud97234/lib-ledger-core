// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "NJSBitcoinLikeAccountCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSBitcoinLikeAccount::getUTXO) {

    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::getUTXO needs 3 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();
    Local<Object> njs_arg_2 = info[2]->ToObject(context).ToLocalChecked();
    NJSBitcoinLikeOutputListCallback *njs_ptr_arg_2 = static_cast<NJSBitcoinLikeOutputListCallback *>(Nan::GetInternalFieldPointer(njs_arg_2,0));
    std::shared_ptr<NJSBitcoinLikeOutputListCallback> arg_2(njs_ptr_arg_2);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeAccount* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeAccount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::getUTXO : implementation of BitcoinLikeAccount is not valid");
    }
    cpp_impl->getUTXO(arg_0,arg_1,arg_2);
}
NAN_METHOD(NJSBitcoinLikeAccount::getUTXOCount) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::getUTXOCount needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSI32Callback *njs_ptr_arg_0 = static_cast<NJSI32Callback *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSI32Callback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeAccount* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeAccount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::getUTXOCount : implementation of BitcoinLikeAccount is not valid");
    }
    cpp_impl->getUTXOCount(arg_0);
}
NAN_METHOD(NJSBitcoinLikeAccount::pickUTXO) {

    //Check if method called with right number of arguments
    if(info.Length() != 4)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::pickUTXO needs 4 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);

    vector<std::shared_ptr<BitcoinLikeOutput>> arg_1;
    Local<Array> arg_1_container = Local<Array>::Cast(info[1]);
    for(uint32_t i = 0; i < arg_1_container->Length(); i++)
    {
        if(arg_1_container->Get(i)->IsNJSBitcoinLikeOutput())
        {
            Local<Object> njs_arg_1_elem = arg_1_container->Get(i)->ToNJSBitcoinLikeOutput()->ToObject(context).ToLocalChecked();
            NJSBitcoinLikeOutput *njs_ptr_arg_1_elem = static_cast<NJSBitcoinLikeOutput *>(Nan::GetInternalFieldPointer(njs_arg_1_elem,0));
            std::shared_ptr<NJSBitcoinLikeOutput> arg_1_elem(njs_ptr_arg_1_elem);

            arg_1.emplace_back(arg_1_elem);
        }
    }

    auto arg_2 = (ledger::core::api::BitcoinLikePickingStrategy)Nan::To<int>(info[2]).FromJust();
    Local<Object> njs_arg_3 = info[3]->ToObject(context).ToLocalChecked();
    NJSBitcoinLikeTransactionRequestCallback *njs_ptr_arg_3 = static_cast<NJSBitcoinLikeTransactionRequestCallback *>(Nan::GetInternalFieldPointer(njs_arg_3,0));
    std::shared_ptr<NJSBitcoinLikeTransactionRequestCallback> arg_3(njs_ptr_arg_3);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeAccount* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeAccount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::pickUTXO : implementation of BitcoinLikeAccount is not valid");
    }
    cpp_impl->pickUTXO(arg_0,arg_1,arg_2,arg_3);
}
NAN_METHOD(NJSBitcoinLikeAccount::estimateFees) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::estimateFees needs 2 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("utxo").ToLocalChecked()).ToLocalChecked();
    vector<std::shared_ptr<BitcoinLikeOutput>> arg_0_1;
    Local<Array> arg_0_1_container = Local<Array>::Cast(field_arg_0_1);
    for(uint32_t i = 0; i < arg_0_1_container->Length(); i++)
    {
        if(arg_0_1_container->Get(i)->IsNJSBitcoinLikeOutput())
        {
            Local<Object> njs_arg_0_1_elem = arg_0_1_container->Get(i)->ToNJSBitcoinLikeOutput()->ToObject(context).ToLocalChecked();
            NJSBitcoinLikeOutput *njs_ptr_arg_0_1_elem = static_cast<NJSBitcoinLikeOutput *>(Nan::GetInternalFieldPointer(njs_arg_0_1_elem,0));
            std::shared_ptr<NJSBitcoinLikeOutput> arg_0_1_elem(njs_ptr_arg_0_1_elem);

            arg_0_1.emplace_back(arg_0_1_elem);
        }
    }


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("outputs").ToLocalChecked()).ToLocalChecked();
    vector<std::shared_ptr<BitcoinLikeOutput>> arg_0_2;
    Local<Array> arg_0_2_container = Local<Array>::Cast(field_arg_0_2);
    for(uint32_t i = 0; i < arg_0_2_container->Length(); i++)
    {
        if(arg_0_2_container->Get(i)->IsNJSBitcoinLikeOutput())
        {
            Local<Object> njs_arg_0_2_elem = arg_0_2_container->Get(i)->ToNJSBitcoinLikeOutput()->ToObject(context).ToLocalChecked();
            NJSBitcoinLikeOutput *njs_ptr_arg_0_2_elem = static_cast<NJSBitcoinLikeOutput *>(Nan::GetInternalFieldPointer(njs_arg_0_2_elem,0));
            std::shared_ptr<NJSBitcoinLikeOutput> arg_0_2_elem(njs_ptr_arg_0_2_elem);

            arg_0_2.emplace_back(arg_0_2_elem);
        }
    }


    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("baseFees").ToLocalChecked()).ToLocalChecked();
    std::experimental::optional

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("totalFees").ToLocalChecked()).ToLocalChecked();
    std::experimental::optional

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(), Nan::New<String>("lockTime").ToLocalChecked()).ToLocalChecked();
    std::experimental::optional
    BitcoinLikeTransactionRequest arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);

    Local<Object> njs_arg_1 = info[1]->ToObject(context).ToLocalChecked();
    NJSBitcoinLikeTransactionRequestCallback *njs_ptr_arg_1 = static_cast<NJSBitcoinLikeTransactionRequestCallback *>(Nan::GetInternalFieldPointer(njs_arg_1,0));
    std::shared_ptr<NJSBitcoinLikeTransactionRequestCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeAccount* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeAccount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::estimateFees : implementation of BitcoinLikeAccount is not valid");
    }
    cpp_impl->estimateFees(arg_0,arg_1);
}
NAN_METHOD(NJSBitcoinLikeAccount::prepareTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::prepareTransaction needs 2 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(), Nan::New<String>("utxo").ToLocalChecked()).ToLocalChecked();
    vector<std::shared_ptr<BitcoinLikeOutput>> arg_0_1;
    Local<Array> arg_0_1_container = Local<Array>::Cast(field_arg_0_1);
    for(uint32_t i = 0; i < arg_0_1_container->Length(); i++)
    {
        if(arg_0_1_container->Get(i)->IsNJSBitcoinLikeOutput())
        {
            Local<Object> njs_arg_0_1_elem = arg_0_1_container->Get(i)->ToNJSBitcoinLikeOutput()->ToObject(context).ToLocalChecked();
            NJSBitcoinLikeOutput *njs_ptr_arg_0_1_elem = static_cast<NJSBitcoinLikeOutput *>(Nan::GetInternalFieldPointer(njs_arg_0_1_elem,0));
            std::shared_ptr<NJSBitcoinLikeOutput> arg_0_1_elem(njs_ptr_arg_0_1_elem);

            arg_0_1.emplace_back(arg_0_1_elem);
        }
    }


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(), Nan::New<String>("outputs").ToLocalChecked()).ToLocalChecked();
    vector<std::shared_ptr<BitcoinLikeOutput>> arg_0_2;
    Local<Array> arg_0_2_container = Local<Array>::Cast(field_arg_0_2);
    for(uint32_t i = 0; i < arg_0_2_container->Length(); i++)
    {
        if(arg_0_2_container->Get(i)->IsNJSBitcoinLikeOutput())
        {
            Local<Object> njs_arg_0_2_elem = arg_0_2_container->Get(i)->ToNJSBitcoinLikeOutput()->ToObject(context).ToLocalChecked();
            NJSBitcoinLikeOutput *njs_ptr_arg_0_2_elem = static_cast<NJSBitcoinLikeOutput *>(Nan::GetInternalFieldPointer(njs_arg_0_2_elem,0));
            std::shared_ptr<NJSBitcoinLikeOutput> arg_0_2_elem(njs_ptr_arg_0_2_elem);

            arg_0_2.emplace_back(arg_0_2_elem);
        }
    }


    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(), Nan::New<String>("baseFees").ToLocalChecked()).ToLocalChecked();
    std::experimental::optional

    auto field_arg_0_4 = Nan::Get(info[0]->ToObject(), Nan::New<String>("totalFees").ToLocalChecked()).ToLocalChecked();
    std::experimental::optional

    auto field_arg_0_5 = Nan::Get(info[0]->ToObject(), Nan::New<String>("lockTime").ToLocalChecked()).ToLocalChecked();
    std::experimental::optional
    BitcoinLikeTransactionRequest arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);

    Local<Object> njs_arg_1 = info[1]->ToObject(context).ToLocalChecked();
    NJSBitcoinLikePreparedTransactionCallback *njs_ptr_arg_1 = static_cast<NJSBitcoinLikePreparedTransactionCallback *>(Nan::GetInternalFieldPointer(njs_arg_1,0));
    std::shared_ptr<NJSBitcoinLikePreparedTransactionCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeAccount* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeAccount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::prepareTransaction : implementation of BitcoinLikeAccount is not valid");
    }
    cpp_impl->prepareTransaction(arg_0,arg_1);
}
NAN_METHOD(NJSBitcoinLikeAccount::broadcastTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::broadcastTransaction needs 2 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    vector<uint8_t> arg_0;
    Local<Array> arg_0_container = Local<Array>::Cast(info[0]);
    for(uint32_t i = 0; i < arg_0_container->Length(); i++)
    {
        if(arg_0_container->Get(i)->IsUint32())
        {
            auto arg_0_elem = Nan::To<uint32_t>(arg_0_container->Get(i)->ToUint32()).FromJust();
            arg_0.emplace_back(arg_0_elem);
        }
    }

    Local<Object> njs_arg_1 = info[1]->ToObject(context).ToLocalChecked();
    NJSStringCallback *njs_ptr_arg_1 = static_cast<NJSStringCallback *>(Nan::GetInternalFieldPointer(njs_arg_1,0));
    std::shared_ptr<NJSStringCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeAccount* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeAccount>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount::broadcastTransaction : implementation of BitcoinLikeAccount is not valid");
    }
    cpp_impl->broadcastTransaction(arg_0,arg_1);
}

NAN_METHOD(NJSBitcoinLikeAccount::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSBitcoinLikeAccount function can only be called as constructor (use New)");
    }
    NJSBitcoinLikeAccount *node_instance = new NJSBitcoinLikeAccount(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSBitcoinLikeAccount::BitcoinLikeAccount_prototype;

Handle<Object> NJSBitcoinLikeAccount::wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeAccount> &object) {
    Local<ObjectTemplate> local_prototype = Nan::New(BitcoinLikeAccount_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSBitcoinLikeAccount *new_obj = new NJSBitcoinLikeAccount(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSBitcoinLikeAccount::wrap: object template not valid");
    }
    return obj;
}

void NJSBitcoinLikeAccount::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSBitcoinLikeAccount::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSBitcoinLikeAccount").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getUTXO", getUTXO);
    Nan::SetPrototypeMethod(func_template,"getUTXOCount", getUTXOCount);
    Nan::SetPrototypeMethod(func_template,"pickUTXO", pickUTXO);
    Nan::SetPrototypeMethod(func_template,"estimateFees", estimateFees);
    Nan::SetPrototypeMethod(func_template,"prepareTransaction", prepareTransaction);
    Nan::SetPrototypeMethod(func_template,"broadcastTransaction", broadcastTransaction);
    //Set object prototype
    BitcoinLikeAccount_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSBitcoinLikeAccount").ToLocalChecked(), func_template->GetFunction());
}
