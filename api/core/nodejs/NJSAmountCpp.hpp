// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from amount.djinni

#ifndef DJINNI_GENERATED_NJSAMOUNT_HPP
#define DJINNI_GENERATED_NJSAMOUNT_HPP


#include "../utils/optional.hpp"
#include "NJSBigIntCpp.hpp"
#include <cstdint>
#include <memory>
#include <string>

#include "../../../../core/src/api/Currency.hpp"
#include "../../../../core/src/api/CurrencyUnit.hpp"
#include "../../../../core/src/api/FormatRules.hpp"
#include "../../../../core/src/api/Locale.hpp"

#include <nan.h>
#include <node.h>
#include "../../../../core/src/api/Amount.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSAmount: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSAmount() {};
    NJSAmount(const std::shared_ptr<ledger::core::api::Amount> &iAmount):_Amount(iAmount){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::Amount> &object);
    static Nan::Persistent<ObjectTemplate> Amount_prototype;
    std::shared_ptr<ledger::core::api::Amount> getCppImpl(){return _Amount;};

private:
    static NAN_METHOD(toBigInt);

    static NAN_METHOD(getCurrency);

    static NAN_METHOD(getUnit);

    static NAN_METHOD(toUnit);

    static NAN_METHOD(toMagnitude);

    static NAN_METHOD(toString);

    static NAN_METHOD(toLong);

    static NAN_METHOD(toDouble);

    static NAN_METHOD(format);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::Amount> _Amount;
};
#endif //DJINNI_GENERATED_NJSAMOUNT_HPP
