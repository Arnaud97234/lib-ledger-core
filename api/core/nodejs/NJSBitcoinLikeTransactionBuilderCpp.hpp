// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKETRANSACTIONBUILDER_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKETRANSACTIONBUILDER_HPP


#include "../../../core/src/api/BitcoinLikePickingStrategy.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSBitcoinLikeScriptCpp.hpp"
#include "NJSBitcoinLikeTransactionCallback.hpp"
#include <cstdint>
#include <memory>
#include <string>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/BitcoinLikeTransactionBuilder.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeTransactionBuilder: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSBitcoinLikeTransactionBuilder() {};
    NJSBitcoinLikeTransactionBuilder(const std::shared_ptr<ledger::core::api::BitcoinLikeTransactionBuilder> &iBitcoinLikeTransactionBuilder):_BitcoinLikeTransactionBuilder(iBitcoinLikeTransactionBuilder){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeTransactionBuilder> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeTransactionBuilder_prototype;
    std::shared_ptr<ledger::core::api::BitcoinLikeTransactionBuilder> getCppImpl(){return _BitcoinLikeTransactionBuilder;};

private:
    static NAN_METHOD(addInput);

    static NAN_METHOD(addOutput);

    static NAN_METHOD(addChangePath);

    static NAN_METHOD(setNumberOfChangeAddresses);

    static NAN_METHOD(pickInputs);

    static NAN_METHOD(sendToAddress);

    static NAN_METHOD(setFeesPerByte);

    static NAN_METHOD(build);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::BitcoinLikeTransactionBuilder> _BitcoinLikeTransactionBuilder;
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKETRANSACTIONBUILDER_HPP
