// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from callback.djinni

#include "NJSBitcoinLikeTransactionRequestCallback.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSBitcoinLikeTransactionRequestCallback::onCallback(const std::experimental::optional<BitcoinLikeTransactionRequest> & result, const std::experimental::optional<Error> & error)
{
    //Wrap parameters
    auto arg_0 = Nan::New<Object>();
    Local<Array> arg_0_1 = Nan::New<Array>();
    for(size_t i = 0; i < (*result).utxo.size(); i++)
    {
        auto arg_0_1_elem = NJSBitcoinLikeOutput::wrap((*result).utxo[i]);

        arg_0_1->Set((int)i,arg_0_1_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("utxo").ToLocalChecked(), arg_0_1);
    Local<Array> arg_0_2 = Nan::New<Array>();
    for(size_t i = 0; i < (*result).outputs.size(); i++)
    {
        auto arg_0_2_elem = NJSBitcoinLikeOutput::wrap((*result).outputs[i]);

        arg_0_2->Set((int)i,arg_0_2_elem);
    }

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("outputs").ToLocalChecked(), arg_0_2);
    auto arg_0_3 = NJSAmount::wrap((*result).baseFees);

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("baseFees").ToLocalChecked(), arg_0_3);
    auto arg_0_4 = NJSAmount::wrap((*result).totalFees);

    Nan::DefineOwnProperty(arg_0, Nan::New<String>("totalFees").ToLocalChecked(), arg_0_4);
    auto arg_0_5 = Nan::New<Int32>((*(*result).lockTime));
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("lockTime").ToLocalChecked(), arg_0_5);

    auto arg_1 = Nan::New<Object>();
    auto arg_1_1 = Nan::New<Integer>((int)(*error).code);
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("code").ToLocalChecked(), arg_1_1);
    auto arg_1_2 = Nan::New<String>((*error).message).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("message").ToLocalChecked(), arg_1_2);

    Nan::HandleScope scope;
    auto local_resolver = Nan::New<Promise::Resolver>(pers_resolver);
    if(error)
    {
        auto rejected = local_resolver->Reject(Nan::GetCurrentContext(), arg_1);
        rejected.FromJust();
    }
    else
    {
        auto resolve = local_resolver->Resolve(Nan::GetCurrentContext(), arg_0);
        resolve.FromJust();
    }
}

NAN_METHOD(NJSBitcoinLikeTransactionRequestCallback::addRef) {

    NJSBitcoinLikeTransactionRequestCallback *obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionRequestCallback>(info.This());
    obj->Ref();
}

NAN_METHOD(NJSBitcoinLikeTransactionRequestCallback::removeRef) {

    NJSBitcoinLikeTransactionRequestCallback *obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeTransactionRequestCallback>(info.This());
    obj->Unref();
}

NAN_METHOD(NJSBitcoinLikeTransactionRequestCallback::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionRequestCallback function can only be called as constructor (use New)");
    }

    NJSBitcoinLikeTransactionRequestCallback *node_instance = nullptr;
    if(info[0]->IsObject())
    {
        node_instance = new NJSBitcoinLikeTransactionRequestCallback(info[0]->ToObject());
    }
    else
    {
        return Nan::ThrowError("NJSBitcoinLikeTransactionRequestCallback::New requires an implementation from node");
    }

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}

void NJSBitcoinLikeTransactionRequestCallback::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSBitcoinLikeTransactionRequestCallback::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSBitcoinLikeTransactionRequestCallback").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"addRef", addRef);
    Nan::SetPrototypeMethod(func_template,"removeRef", removeRef);

    //Add template to target
    target->Set(Nan::New<String>("NJSBitcoinLikeTransactionRequestCallback").ToLocalChecked(), func_template->GetFunction());
}
