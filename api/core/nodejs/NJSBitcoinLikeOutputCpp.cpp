// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "NJSBitcoinLikeOutputCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSBitcoinLikeOutput::getTransactionHash) {
    Nan::HandleScope scope;

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getTransactionHash needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeOutput* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeOutput>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getTransactionHash : implementation of BitcoinLikeOutput is not valid");
    }

    auto result = cpp_impl->getTransactionHash();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeOutput::getOutputIndex) {
    Nan::HandleScope scope;

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getOutputIndex needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeOutput* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeOutput>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getOutputIndex : implementation of BitcoinLikeOutput is not valid");
    }

    auto result = cpp_impl->getOutputIndex();

    //Wrap result in node object
    auto arg_0 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeOutput::getValue) {
    Nan::HandleScope scope;

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getValue needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeOutput* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeOutput>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getValue : implementation of BitcoinLikeOutput is not valid");
    }

    auto result = cpp_impl->getValue();

    //Wrap result in node object
    auto arg_0 = NJSAmount::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeOutput::getScript) {
    Nan::HandleScope scope;

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getScript needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeOutput* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeOutput>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getScript : implementation of BitcoinLikeOutput is not valid");
    }

    auto result = cpp_impl->getScript();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t i = 0; i < result.size(); i++)
    {
        auto arg_0_elem = Nan::New<Uint32>(result[i]);
        arg_0->Set((int)i,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSBitcoinLikeOutput::getAddress) {
    Nan::HandleScope scope;

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getAddress needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSBitcoinLikeOutput* obj = Nan::ObjectWrap::Unwrap<NJSBitcoinLikeOutput>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput::getAddress : implementation of BitcoinLikeOutput is not valid");
    }

    auto result = cpp_impl->getAddress();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>((*result)).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSBitcoinLikeOutput::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSBitcoinLikeOutput function can only be called as constructor (use New)");
    }
    NJSBitcoinLikeOutput *node_instance = new NJSBitcoinLikeOutput(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSBitcoinLikeOutput::BitcoinLikeOutput_prototype;

Handle<Object> NJSBitcoinLikeOutput::wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeOutput> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(BitcoinLikeOutput_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSBitcoinLikeOutput *new_obj = new NJSBitcoinLikeOutput(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSBitcoinLikeOutput::wrap: object template not valid");
    }
    return obj;
}

void NJSBitcoinLikeOutput::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSBitcoinLikeOutput::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSBitcoinLikeOutput").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getTransactionHash", getTransactionHash);
    Nan::SetPrototypeMethod(func_template,"getOutputIndex", getOutputIndex);
    Nan::SetPrototypeMethod(func_template,"getValue", getValue);
    Nan::SetPrototypeMethod(func_template,"getScript", getScript);
    Nan::SetPrototypeMethod(func_template,"getAddress", getAddress);
    //Set object prototype
    BitcoinLikeOutput_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSBitcoinLikeOutput").ToLocalChecked(), func_template->GetFunction());
}
