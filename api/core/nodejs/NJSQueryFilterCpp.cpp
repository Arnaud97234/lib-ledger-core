// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#include "NJSQueryFilterCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSQueryFilter::accountEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::accountEq needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::accountEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->accountEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::accountNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::accountNeq needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::accountNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->accountNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::dateLte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::dateLte needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<std::chrono::system_clock::time_point>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::dateLte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->dateLte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::dateLt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::dateLt needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<std::chrono::system_clock::time_point>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::dateLt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->dateLt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::dateGt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::dateGt needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<std::chrono::system_clock::time_point>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::dateGt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->dateGt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::dateGte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::dateGte needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<std::chrono::system_clock::time_point>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::dateGte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->dateGte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::dateEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::dateEq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<std::chrono::system_clock::time_point>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::dateEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->dateEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::dateNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::dateNeq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<std::chrono::system_clock::time_point>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::dateNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->dateNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::containsRecipient) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::containsRecipient needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::containsRecipient : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->containsRecipient(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::containsSender) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::containsSender needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::containsSender : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->containsSender(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::currencyEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::currencyEq needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::currencyEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->currencyEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::operationUidEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::operationUidEq needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::operationUidEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->operationUidEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::operationUidNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::operationUidNeq needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::operationUidNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->operationUidNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::trustEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::trustEq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = (ledger::core::api::TrustLevel)Nan::To<int>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::trustEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->trustEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::trustNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::trustNeq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = (ledger::core::api::TrustLevel)Nan::To<int>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::trustNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->trustNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::feesEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::feesEq needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::feesEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->feesEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::feesNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::feesNeq needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::feesNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->feesNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::feesGte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::feesGte needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::feesGte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->feesGte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::feesGt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::feesGt needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::feesGt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->feesGt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::feesLte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::feesLte needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::feesLte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->feesLte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::feesLt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::feesLt needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::feesLt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->feesLt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::amountEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::amountEq needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::amountEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->amountEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::amountNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::amountNeq needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::amountNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->amountNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::amountGte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::amountGte needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::amountGte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->amountGte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::amountGt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::amountGt needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::amountGt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->amountGt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::amountLte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::amountLte needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::amountLte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->amountLte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::amountLt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::amountLt needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSAmount *njs_ptr_arg_0 = static_cast<NJSAmount *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSAmount> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::amountLt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->amountLt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightEq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int64_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightNeq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int64_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightGte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightGte needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int64_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightGte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightGte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightGt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightGt needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int64_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightGt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightGt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightLte) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightLte needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int64_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightLte : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightLte(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightLt) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightLt needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int64_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightLt : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightLt(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::blockHeightIsNull) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightIsNull needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::blockHeightIsNull : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->blockHeightIsNull();

    //Wrap result in node object
    auto arg_0 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSQueryFilter::operationTypeEq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::operationTypeEq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = (ledger::core::api::OperationType)Nan::To<int>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::operationTypeEq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->operationTypeEq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::operationTypeNeq) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::operationTypeNeq needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = (ledger::core::api::OperationType)Nan::To<int>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::operationTypeNeq : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->operationTypeNeq(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::op_and) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::op_and needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSQueryFilter *njs_ptr_arg_0 = static_cast<NJSQueryFilter *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSQueryFilter> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::op_and : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->op_and(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::op_or) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::op_or needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSQueryFilter *njs_ptr_arg_0 = static_cast<NJSQueryFilter *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSQueryFilter> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::op_or : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->op_or(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::op_and_not) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::op_and_not needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSQueryFilter *njs_ptr_arg_0 = static_cast<NJSQueryFilter *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSQueryFilter> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::op_and_not : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->op_and_not(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSQueryFilter::op_or_not) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::op_or_not needs 1 arguments");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(context).ToLocalChecked();
    NJSQueryFilter *njs_ptr_arg_0 = static_cast<NJSQueryFilter *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSQueryFilter> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSQueryFilter* obj = Nan::ObjectWrap::Unwrap<NJSQueryFilter>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSQueryFilter::op_or_not : implementation of QueryFilter is not valid");
    }

    auto result = cpp_impl->op_or_not(arg_0);

    //Wrap result in node object
    auto arg_1 = NJSQueryFilter::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_1);
}

NAN_METHOD(NJSQueryFilter::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSQueryFilter function can only be called as constructor (use New)");
    }

    Isolate *isolate = info.GetIsolate();
    Local<Context> context = isolate->GetCurrentContext();

    //Check if NJSQueryFilter::New called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSQueryFilter::New needs same number of arguments as ledger::core::api::QueryFilter::accountEq method");
    }

    //Unwrap objects to get C++ classes
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Call factory
    auto cpp_instance = ledger::core::api::QueryFilter::accountEq(arg_0);
    NJSQueryFilter *node_instance = new NJSQueryFilter(cpp_instance);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSQueryFilter::QueryFilter_prototype;

Handle<Object> NJSQueryFilter::wrap(const std::shared_ptr<ledger::core::api::QueryFilter> &object) {
    Local<ObjectTemplate> local_prototype = Nan::New(QueryFilter_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSQueryFilter *new_obj = new NJSQueryFilter(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSQueryFilter::wrap: object template not valid");
    }
    return obj;
}

void NJSQueryFilter::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSQueryFilter::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSQueryFilter").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"op_and", op_and);
    Nan::SetPrototypeMethod(func_template,"op_or", op_or);
    Nan::SetPrototypeMethod(func_template,"op_and_not", op_and_not);
    Nan::SetPrototypeMethod(func_template,"op_or_not", op_or_not);
    //Set object prototype
    QueryFilter_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSQueryFilter").ToLocalChecked(), func_template->GetFunction());
}
