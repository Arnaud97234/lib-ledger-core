// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#ifndef DJINNI_GENERATED_NJSACCOUNT_HPP
#define DJINNI_GENERATED_NJSACCOUNT_HPP


#include "../../../core/src/api/WalletType.hpp"
#include "NJSAmountCallback.hpp"
#include "NJSBlockCallback.hpp"
#include "NJSEventBusCpp.hpp"
#include "NJSLoggerCpp.hpp"
#include "NJSOperationQueryCpp.hpp"
#include "NJSPreferencesCpp.hpp"
#include "NJSStringListCallback.hpp"
#include <cstdint>
#include <memory>
#include <string>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/Account.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSAccount: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSAccount() {};
    NJSAccount(const std::shared_ptr<ledger::core::api::Account> &iAccount):_Account(iAccount){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::Account> &object);
    static Nan::Persistent<ObjectTemplate> Account_prototype;
    std::shared_ptr<ledger::core::api::Account> getCppImpl(){return _Account;};

private:
    static NAN_METHOD(getIndex);

    static NAN_METHOD(queryOperations);

    static NAN_METHOD(getBalance);

    static NAN_METHOD(isSynchronizing);

    static NAN_METHOD(synchronize);

    static NAN_METHOD(getPreferences);

    static NAN_METHOD(getLogger);

    static NAN_METHOD(getOperationPreferences);

    /**
     * asBitcoinLikeAccount(): Callback<BitcoinLikeAccount>;
     * asEthereumLikeAccount(): Callback<EthereumLikeAccount>;
     * asRippleLikeAccount(): Callback<RippleLikeAccount>;
     */
    static NAN_METHOD(isInstanceOfBitcoinLikeAccount);

    static NAN_METHOD(isInstanceOfEthereumLikeAccount);

    static NAN_METHOD(isInstanceOfRippleLikeAccount);

    static NAN_METHOD(getFreshPublicAddresses);

    static NAN_METHOD(getWalletType);

    static NAN_METHOD(getEventBus);

    static NAN_METHOD(startBlockchainObservation);

    static NAN_METHOD(stopBlockchainObservation);

    static NAN_METHOD(isObservingBlockchain);

    static NAN_METHOD(getLastBlock);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::Account> _Account;
};
#endif //DJINNI_GENERATED_NJSACCOUNT_HPP
